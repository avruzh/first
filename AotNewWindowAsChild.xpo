Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysFormRun выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysFormRun
    PROPERTIES
      Name                #SysFormRun
      Extends             #FormRun
      RunOn               #Client
      Origin              #{2D0A09A8-0000-1000-AAF2-52576F726D52}
      LegacyId            #2472
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysFormRun extends FormRun
        #{
        #
        #
        #}
      ENDSOURCE
      SOURCE #colorLookup
        #static OLE_Color colorLookup(
        #    FormRun             formRun,
        #    OLE_Color           color,
        #    Binary              customColors    = null,
        #    boolean             fullOpen        = false
        #    )
        #{
        #    int             r, g, b;
        #    container       chosenColor;
        #
        #    [r, g, b]   = WinAPI::RGBint2Con(color);
        #    chosenColor = WinAPI::chooseColor(formRun.hWnd(), r, g, b, customColors, fullOpen);
        #    if (chosenColor)
        #    {
        #        [r, g, b] = chosenColor;
        #        return WinAPI::RGB2int(r, g, b);
        #    }
        #    return color;
        #}
      ENDSOURCE
      SOURCE #controlType
        #static FormControlType controlType(classId classId)
        #{
        #    switch (classId)
        #    {
        #        case classnum(FormStaticTextControl):
        #        case classnum(FormBuildStaticTextControl):
        #            return FormControlType::StaticText;
        #
        #        case classnum(FormStringControl):
        #        case classnum(FormBuildStringControl):
        #            return FormControlType::String;
        #
        #        case classnum(FormTabControl):
        #        case classnum(FormBuildTabControl):
        #            return FormControlType::Tab;
        #
        #        case classnum(FormCheckBoxControl):
        #        case classnum(FormBuildCheckBoxControl):
        #            return FormControlType::CheckBox;
        #
        #        case classnum(FormGroupControl):
        #        case classnum(FormBuildGroupControl):
        #            return FormControlType::Group;
        #
        #        case classnum(FormButtonControl):
        #        case classnum(FormBuildButtonControl):
        #            return FormControlType::Button;
        #
        #        case classnum(FormRealControl):
        #        case classnum(FormBuildRealControl):
        #            return FormControlType::Real;
        #
        #        case classnum(FormIntControl):
        #        case classnum(FormBuildIntControl):
        #            return FormControlType::Integer;
        #
        #        case classnum(FormInt64Control):
        #        case classnum(FormBuildInt64Control):
        #            return FormControlType::Int64;
        #
        #        case classnum(FormGuidControl):
        #        case classnum(FormBuildGuidControl):
        #            return FormControlType::Guid;
        #
        #        case classnum(FormComboBoxControl):
        #        case classnum(FormBuildComboBoxControl):
        #            return FormControlType::ComboBox;
        #
        #        case classnum(FormWindowControl):
        #        case classnum(FormBuildWindowControl):
        #            return FormControlType::Image;
        #
        #        case classnum(FormDateControl):
        #        case classnum(FormBuildDateControl):
        #            return FormControlType::Date;
        #
        #        case classnum(FormDateTimeControl):
        #        case classnum(FormBuildDateTimeControl):
        #            return FormControlType::DateTime;
        #
        #        case classnum(FormGridControl):
        #        case classnum(FormBuildGridControl):
        #            return FormControlType::Grid;
        #
        #        case classnum(FormRadioControl):
        #        case classnum(FormBuildRadioControl):
        #            return FormControlType::RadioButton;
        #
        #        case classnum(FormButtonGroupControl):
        #        case classnum(FormBuildButtonGroupControl):
        #            return FormControlType::ButtonGroup;
        #
        #        case classnum(FormTabPageControl):
        #        case classnum(FormBuildTabPageControl):
        #            return FormControlType::TabPage;
        #
        #        case classnum(FormCommandButtonControl):
        #        case classnum(FormBuildCommandButtonControl):
        #            return FormControlType::CommandButton;
        #
        #        case classnum(FormMenuButtonControl):
        #        case classnum(FormBuildMenuButtonControl):
        #            return FormControlType::MenuButton;
        #
        #        case classnum(FormFunctionButtonControl):
        #        case classnum(FormBuildFunctionButtonControl):
        #            return FormControlType::MenuFunctionButton;
        #
        #        case classnum(FormListBoxControl):
        #        case classnum(FormBuildListBoxControl):
        #            return FormControlType::ListBox;
        #
        #        case classnum(FormTimeControl):
        #        case classnum(FormBuildTimeControl):
        #            return FormControlType::Time;
        #
        #        case classnum(FormTableControl):
        #        case classnum(FormBuildTableControl):
        #            return FormControlType::Table;
        #
        #        case classnum(FormButtonSeparatorControl):
        #        case classnum(FormBuildButtonSeparatorControl):
        #            return FormControlType::ButtonSeparator;
        #
        #        case classnum(FormTreeControl):
        #        case classnum(FormBuildTreeControl):
        #            return FormControlType::Tree;
        #
        #        case classnum(FormActiveXControl):
        #        case classnum(FormBuildActiveXControl):
        #            return FormControlType::ActiveX;
        #
        #        case classnum(FormListControl):
        #        case classnum(FormBuildListControl):
        #            return FormControlType::ListView;
        #
        #        case classnum(FormProgressControl):
        #        case classnum(FormBuildProgressControl):
        #            return FormControlType::Progress;
        #
        #        case classnum(FormAnimateControl):
        #        case classnum(FormBuildAnimateControl):
        #            return FormControlType::Animate;
        #
        #        case classnum(FormHTMLControl):
        #        case classnum(FormBuildHTMLControl):
        #            return FormControlType::HTML;
        #
        #        case classnum(FormActionPaneControl):
        #        case classnum(FormBuildActionPaneControl):
        #            return FormControlType::ActionPane;
        #
        #        case classnum(FormActionPaneTabControl):
        #        case classnum(FormBuildActionPaneTabControl):
        #            return FormControlType::ActionPaneTab;
        #
        #        case classnum(FormFilterPaneControl):
        #        case classnum(FormBuildFilterPaneControl):
        #            return FormControlType::FilterPane;
        #
        #        case classnum(FormManagedHostControl):
        #        case classnum(FormBuildManagedHostControl):
        #            return FormControlType::ManagedHost;
        #
        #        case classnum(FormSegmentedEntryControl):
        #        case classnum(FormBuildSegmentedEntryControl):
        #            return FormControlType::SegmentedEntry;
        #
        #        case classnum(FormDropDialogButtonControl):
        #        case classnum(FormBuildDropDialogButtonControl):
        #            return FormControlType::DropDialogButton;
        #
        #        case classnum(FormReferenceGroupControl):
        #        case classnum(FormBuildReferenceGroupControl):
        #            return FormControlType::ReferenceGroup;
        #
        #        case classnum(FormFastTabHeaderControl):
        #        case classnum(FormBuildFastTabHeaderControl):
        #            return FormControlType::FastTabHeader;
        #
        #        case classnum(FormRichTextControl):
        #        case classnum(FormBuildRichTextControl):
        #            return FormControlType::RichText;
        #    }
        #
        #    throw error(strfmt("@SYS18598",funcname()));
        #}
      ENDSOURCE
      SOURCE #controlTypeStr
        #static identifiername controlTypeStr(classId classId)
        #{
        #    switch (classId)
        #    {
        #        case classnum(Form):
        #            return 'STATICTEXT';
        #        case classnum(FormStringControl):
        #            return 'STRINGEdit';
        #        case classnum(FormTabControl):
        #            return 'TAB';
        #        case classnum(FormCheckBoxControl):
        #            return 'CHECKBOX';
        #        case classnum(FormGroupControl):
        #            return 'GROUP';
        #        case classnum(FormButtonControl):
        #            return 'BUTTON';
        #        case classnum(FormRealControl):
        #            return 'REALEdit';
        #        case classnum(FormIntControl):
        #            return 'INTEdit';
        #        case classnum(FormInt64Control):
        #            return 'INT64Edit';
        #        case classnum(FormGuidControl):
        #            return 'GUIDEdit';
        #        case classnum(FormComboBoxControl):
        #            return 'COMBOBOX';
        #        case classnum(FormWindowControl):
        #            return 'Window';
        #        case classnum(FormDateControl):
        #            return 'DATEEdit';
        #        case classnum(FormGridControl):
        #            return 'GRID';
        #        case classnum(FormRadioControl):
        #            return 'RADIOBUTTON';
        #        case classnum(FormButtonGroupControl):
        #            return 'BUTTONGROUP';
        #        case classnum(FormTabPageControl):
        #            return 'TABPAGE';
        #        case classnum(FormCommandButtonControl):
        #            return 'COMMANDBUTTON';
        #        case classnum(FormMenuButtonControl):
        #            return 'MENUBUTTON';
        #        case classnum(FormFunctionButtonControl):
        #            return 'MENUItemBUTTON';
        #        case classnum(FormListBoxControl):
        #            return 'LISTBOX';
        #        case classnum(FormTimeControl):
        #            return 'TIMEEdit';
        #        case classnum(FormTableControl):
        #            return 'TABLE';
        #        case classnum(FormButtonSeparatorControl):
        #            return 'SEPARATOR';
        #        case classnum(FormTreeControl):
        #            return 'TREE';
        #        case classnum(FormActiveXControl):
        #            return 'ACTIVEX';
        #        case classnum(FormListControl):
        #            return 'LISTVIEW';
        #//        case classNum(FormProgressControl):
        #//            return 'PROGRESS';
        #        case classnum(FormAnimateControl):
        #            return 'ANIMATE';
        #        case classnum(FormHTMLControl):
        #            return 'HTML';
        #        case classnum(FormActionPaneControl):
        #            return 'ACTIONPANE';
        #        case classnum(FormActionPaneTabControl):
        #            return 'ACTIONPANETAB';
        #        case classnum(FormManagedHostControl):
        #            return 'MANAGEDHOST';
        #        case classnum(FormSegmentedEntryControl):
        #            return 'SegmentedEntry';
        #        case classnum(FormDropDialogButtonControl):
        #            return 'DROPDIALOGBUTTON';
        #        case classnum(FormReferenceGroupControl):
        #            return 'ReferenceGroup';
        #        case classnum(FormFastTabHeaderControl):
        #            return 'FastTabHeader';
        #        // lukDEVAX_aruz_AotNewWindowAsChil, aruz, 24.08.2018 -->
        #        case classnum(FormDateTimeControl):
        #            return 'DateTime';
        #        // lukDEVAX_aruz_AotNewWindowAsChil, aruz, 24.08.2018 <--
        #    }
        #
        #    throw error(strfmt("@SYS18598",funcname()));
        #}
      ENDSOURCE
      SOURCE #ctrlId2treeNode
        #static TreeNode ctrlId2treeNode(
        #    FormRun formRun,
        #    int     ctrlId
        #    )
        #{
        #    return TreeNode::findNode(SysFormRun::ctrlId2treeNodePath(formRun,ctrlId));
        #}
      ENDSOURCE
      SOURCE #ctrlId2treeNodePath
        #static TreeNodePath ctrlId2treeNodePath(FormRun formRun, int ctrlId)
        #{
        #    #AOT
        #    TreeNodePath getParent(int _id)
        #    {
        #        FormBuildControl    fbc;
        #        FormControl         fc;
        #        TreeNodePath        subNodePath;
        #
        #        if (! _id)
        #            return '';
        #
        #        fbc = formRun.form().design().control(_id);
        #        fc  = formRun.control(_id);
        #
        #        subNodePath = SysFormRun::controlTypeStr(fc.handle())+':'+fc.name();
        #
        #        if (fbc.isContainer())
        #            subNodePath = strfmt('[%1]',subNodePath);
        #
        #        return getParent(fbc.containerId())+'\\'+subNodePath;
        #    }
        #    return #FormsPath+'\\'+formRun.name()+'\\designs\\design'+getParent(ctrlId);
        #}
      ENDSOURCE
      SOURCE #getBody
        #static public COM getBody(Object html)
        #{
        #    COM document;
        #    COM body;
        #    #help
        #
        #    if (html.className() == #HTMLDocumentClassName)
        #    {
        #        document = html;
        #    }
        #    else
        #    {
        #        document = html.document();
        #    }
        #
        #    if (!document)
        #    {
        #        SysHelp::initWebBrowser(html);
        #
        #        if (html.className() == #HTMLDocumentClassName)
        #        {
        #            document = html;
        #        }
        #        else
        #        {
        #            document = html.document();
        #        }
        #
        #        if (!document)
        #        {
        #            if (html.className() != #WebBrowserClassName)
        #                throw error(funcname());
        #            return null;
        #        }
        #    }
        #    body = document.body();
        #    return body;
        #}
      ENDSOURCE
      SOURCE #getFormListControlWidth
        #/// <summary>
        #/// Determines the appropriate width, in pixels, for a <c>FormListControl</c> object based on a
        #/// collection of strings that represent the items in the list.
        #/// </summary>
        #/// <param name="_listControl">
        #/// The <c>FormListControl</c> of which to determine the width.
        #/// </param>
        #/// <param name="_listItems">
        #/// A container that contains the textual strings that are listed in the <c>FormListControl</c> object.
        #/// </param>
        #/// <returns>
        #/// The list view width in pixels.
        #/// </returns>
        #/// <remarks>
        #/// This considers the width of a vertical scrollbar that may display on the <c>FormListControl</c>
        #/// object if there is not enough vertical space. Add an additional buffer of pixel width, if it is
        #/// needed, to the returned value of this method.
        #/// </remarks>
        ##WinAPI
        #public static int getFormListControlWidth(
        #    FormListControl     _listControl,
        #    container           _listItems)
        #{
        #    int i;
        #    int itemCount;
        #    int itemWidth;
        #    int itemWidthMax;
        #    str itemStringToMeasure;
        #
        #    itemCount = conLen(_listItems);
        #
        #    for (i = 1; i <= itemCount; i++)
        #    {
        #        itemStringToMeasure = conPeek(_listItems,i);
        #
        #        itemWidth = WinAPI::getListViewStringWidth(_listControl.hWnd(), itemStringToMeasure);
        #
        #        itemWidthMax = max(itemWidthMax, itemWidth);
        #    }
        #
        #    // This value is the width of the form control and the width of the vertical scroll bar
        #    return itemWidthMax + WinAPI::getSystemMetrics(#SM_CXVSCROLL);
        #}
      ENDSOURCE
      SOURCE #hasMethod
        #client static boolean hasMethod(
        #    FormRun        fr,
        #    identifiername methodName
        #    )
        #{
        #    return Form::formRunHasMethod(fr, methodName);
        #}
      ENDSOURCE
      SOURCE #hideIfEmpty
        #/// <summary>
        #/// Hides a container control if it has no visible children.
        #/// </summary>
        #/// <param name="_formControl">
        #/// The container control to potentially hide.
        #/// </param>
        #/// <returns>
        #/// true if the control was hidden; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method mimics the <c>HideIfEmpty</c> property for forms that are already rendered.
        #/// </remarks>
        #public static boolean hideIfEmpty(FormControl _formControl)
        #{
        #    FormControl control;
        #    Object containerControl;
        #    boolean res = true;
        #    int i;
        #
        #    if (_formControl is FormGroupControl ||
        #        _formControl is FormTabPageControl ||
        #        _formControl is FormTabControl)
        #    {
        #        containerControl = _formControl;
        #        for (i=containerControl.controlCount(); i > 0; i--)
        #        {
        #            control = containerControl.controlNum(i);
        #            if (!SysFormRun::hideIfEmpty(control))
        #            {
        #                res = false; // A visible control found
        #            }
        #        }
        #
        #        if (res)
        #        {
        #            //No visible controls found
        #            containerControl.visible(false);
        #        }
        #        return res;
        #    }
        #
        #    return _formControl.visible() == false;
        #}
      ENDSOURCE
      SOURCE #htmlFormatAsForm
        ##WinAPI
        #static void htmlFormatAsForm(Object html)
        #{
        #    COM body = SysFormRun::getBody(html);
        #
        #    if (body)
        #    {
        #        if  (!strscan(body.outerHTML(), '<LI>',1,maxint()))
        #        {
        #            body.leftMargin(0);
        #        }
        #        body.rightMargin(0);
        #        body.topMargin(0);
        #        body.bottomMargin(0);
        #        body.scroll('no');
        #        SysFormRun::htmlSetSystemFont(html);
        #    }
        #}
      ENDSOURCE
      SOURCE #htmlSetBackgroundColor
        ##WinAPI
        #static void htmlSetBackgroundColor(Object html, int color = #COLOR_WINDOW)
        #{
        #    int red,green,blue;
        #
        #    [red,green,blue] = WinAPI::getSysColor(color);
        #    html.bgColor(COMVariant::createFromStr('rgb(' + int2str(red) + ',' + int2str(green) + ',' + int2str(blue) + ')'));
        #}
      ENDSOURCE
      SOURCE #htmlSetForegroundColor
        ##WinAPI
        #static void htmlSetForegroundColor(Object _html, int _systemColor = #COLOR_WINDOWTEXT)
        #{
        #    int red,green,blue;
        #
        #    [red,green,blue] = WinAPI::getSysColor(_systemColor);
        #    _html.fgColor(COMVariant::createFromStr('rgb(' + int2str(red) + ',' + int2str(green) + ',' + int2str(blue) + ')'));
        #
        #    if (prmisdefault(_systemColor))
        #        SysFormRun::htmlFormatAsForm(_html);
        #}
      ENDSOURCE
      SOURCE #htmlSetHeightFromText
        #static void htmlSetHeightFromText(
        #    Object  html,
        #    int     maxHeight = maxint()
        #    )
        #{
        #    #define.Yes('yes')
        #    int height;
        #    COM body = SysFormRun::getBody(html);
        #
        #    if (body)
        #    {
        #        switch (true)
        #        {
        #            case body.scrollHeight() > maxHeight :
        #                body.scroll(#Yes);
        #                height = maxHeight;
        #                break;
        #
        #            case strlen(body.innerText()) > 0 :
        #                height = body.scrollHeight();
        #                break;
        #
        #            default :
        #                height = 0;
        #        }
        #    }
        #
        #    html.height(height);
        #}
      ENDSOURCE
      SOURCE #htmlSetSystemFont
        #static void htmlSetSystemFont(Object _html)
        #{
        #    System.Globalization.NumberFormatInfo numberFormatter;
        #    System.Single fontSizeSingle;
        #    System.Int32  fontSizeInt32;
        #    COM         body    = SysFormRun::getBody(_html);
        #    COM         style;
        #    str         fontName;
        #    int         fontSize;
        #
        #    #define.fontPoint("pt")
        #
        #    System.Drawing.Font font = System.Drawing.SystemFonts::get_IconTitleFont();
        #    System.Drawing.FontFamily fontFamily;
        #
        #    if (body)
        #    {
        #        numberFormatter = new System.Globalization.NumberFormatInfo();
        #        fontSizeSingle = font.get_Size();
        #        fontSizeInt32 =  fontSizeSingle.ToInt32(numberFormatter);
        #
        #        fontFamily = font.get_FontFamily();
        #        FontName = fontFamily.get_Name();
        #        fontSize = fontSizeInt32;
        #
        #        style   = body.style();
        #        style.fontFamily(fontName);
        #        style.fontSize(int2str(fontSize) + #fontPoint);
        #    }
        #}
      ENDSOURCE
      SOURCE #isCalledFromJumpRef
        #static boolean isCalledFromJumpRef(
        #    Args        args,
        #    fieldId     fieldId
        #    )
        #{
        #    return ! args.record() && args.lookupField() == fieldId;
        #}
      ENDSOURCE
      SOURCE #isDocked
        #static boolean isDocked(FormRun formRun)
        #{
        #    int leftMode = formRun.design().leftMode();
        #    int topMode  = formRun.design().topMode();
        #
        #    if (leftMode == FormLeft::LeftEdge || leftMode == FormLeft::RightEdge ||
        #        topMode  == FormTop::TopEdge   || topMode  == FormTop::BottomEdge)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #isFirstRun
        #static boolean isFirstRun(FormRun _form)
        #{
        #    SysLastValue lastValue;
        #    string255 formName = _form.name();
        #    UserId userId = curuserid();
        #
        #    select firstonly RecId from lastValue
        #    where  lastValue.userId == userId
        #        && lastValue.recordType == UtilElementType::Usersetup
        #        && lastValue.elementName == formName;
        #
        #    return (lastValue.RecId == 0);
        #}
      ENDSOURCE
      SOURCE #setDatasourceAllowEdit
        #static void setDatasourceAllowEdit(
        #    FormDataSource  ds,
        #    fieldId         fieldId ,
        #    boolean         allowEdit
        #    )
        #{
        #    FormObjectSet s;
        #    FormDataObject o;
        #
        #    s = ds;
        #    o = s.object(fieldId);
        #    o.allowEdit(allowEdit);
        #}
      ENDSOURCE
      SOURCE #stringSetHeightFromLines
        #static void stringSetHeightFromLines(
        #    FormControl         ctrl,
        #    int                 disp = 0    // Extra number of lines to be added
        #    )
        #{
        #    Object o;
        #    #define.EM_GetLineCount(0x00BA)
        #
        #    int lines = WinAPI::sendMessage(ctrl.hWnd(),#EM_GetLineCount,0,'');
        #    o = ctrl;
        #    o.displayHeight(lines+disp);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: lukOpenedNodeWindows выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #lukOpenedNodeWindows
    PROPERTIES
      Name                #lukOpenedNodeWindows
      Origin              #{8BB800AE-1DC0-4668-AE00-5648DB182A2F}
      LegacyId            #53987
    ENDPROPERTIES
    
    METHODS
      SOURCE #addNodePath
        #// GRD_R185928, Печать реестра факторинга, aruz, 15.04.2018
        ##WinApi
        #void addNodePath( str _nodePath, HWnd _hWnd)
        #{
        #    HWnd    hWndOld;
        #    ;
        #    if ( this.nodePath2HWnd().exists( _nodePath))
        #    {// элемент AOT зарегистрирован в кеше
        #        hWndOld = this.nodePath2HWnd().lookup( _nodePath);
        #        if ( hWndOld && winapi::getWindowText( hWndOld))
        #        {// окно уже открыто
        #            winapi::destroyWindow( hWndOld);
        #        }
        #        this.nodePath2HWnd().remove( _nodePath);
        #    }
        #    // обновляем указатель окна элемента AOT
        #    this.nodePath2HWnd().insert( _nodePath, _hWnd);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///     Сокращает количество окон, в которых открыт одинаковый элемент AOT
        #/// </summary>
        #/// <remarks>
        #///      Поддерживает карту соответствия полного пути элемента AOT
        #///      указанному идентификатору окна. Карта заполняется в \Classes\Global\grd_aotNewWindowAsChild
        #/// </remarks>
        #/// <modification projid="GRD_AOTNewWindow" author="aruz" date="16.04.2018">
        #///
        #/// </modification>
        #
        #class lukOpenedNodeWindows
        #{
        #    Map nodePath2HWnd;// карта указателей окон элементов AOT
        #}
      ENDSOURCE
      SOURCE #nodePath2HWnd
        #// GRD_AOTNewWindow, aruz, 15.04.2018
        #protected Map nodePath2HWnd()
        #{
        #    SysGlobalCache  globalCache;
        #    str             owner;
        #    ;
        #    globalCache = classFactory.globalCache();
        #    owner = classstr( lukOpenedNodeWindows);
        #    if ( !globalCache.isSet( owner, funcname()))
        #    {// кешируем карту указателей окон
        #        nodePath2HWnd = new Map( Types::String, Types::Integer);
        #        globalCache.set( owner, funcname(), nodePath2HWnd);
        #    }
        #    else
        #    {
        #        nodePath2HWnd = globalCache.get( owner, funcname());
        #    }
        #    return nodePath2HWnd;
        #}
      ENDSOURCE
      SOURCE #aotNewWindowAsChild
        #// GRD_AOTNewWindow, ARuzh, 21.01.2017
        #// открывает родительский узел в новом окне с позиционированием на подузле
        #// с использованием кода приведенного AndyD
        #// в http://axforum.info/forums/showthread.php?t=10287&highlight=aotNewWindow
        ##WinAPI
        ##define.VK_DOWN(0x28)
        ##define.VK_RIGHT(0x27)
        #public client server static boolean aotNewWindowAsChild( TreeNode _childNode)
        #{
        #    TreeNode            endParentNode;
        #    HWND                wndHandleParent;
        #    HWND                wndHandle;
        #
        #    List                nodeNameList;
        #    TreeNode            node;
        #    TreeNode            nodeParent;
        #    ListEnumerator      le;
        #    int                 ii;
        #    int                 iSpace;
        #    boolean             childNodeOpen;
        #    str                 findName;
        #    str                 childNodePath;
        #
        #    // GRD_AOTNewWindow, , aruz, 16.04.2018 -->
        #    void nodeNameListWithRelease( str _nodePath, str _nodeName)
        #    {// собирает имена предков элемента AOT от него до самого раннего
        #        TreeNode    nodeIn;
        #        TreeNode    nodeInParent;
        #        str         nodeInParentPath;
        #        str         nodeInParentName;
        #        ;
        #        if ( _nodePath)
        #        {
        #            nodeIn = TreeNode::findNode( _nodePath);
        #        }
        #        if ( nodeIn)
        #        {
        #            nodeNameList.addStart( _nodeName);
        #
        #            if (!endParentNode || nodeIn.treeNodePath() == endParentNode.treeNodePath())
        #            {// самый ранний предок найден освобождаем память от nodeIn
        #                if (!nodeIn.equal(_childNode))
        #                {
        #                    nodeIn.treeNodeRelease();
        #                    nodeIn = null;
        #                }
        #            }
        #            else
        #            {// перед поиском очередного предка освобождаем память от промежуточных node's
        #                nodeInParent        = nodeIn.AOTparent();
        #                nodeInParentPath    = nodeInParent.treeNodePath();
        #                nodeInParentName    = nodeInParent.treeNodeName();
        #
        #                if (!nodeIn.equal(_childNode))
        #                {
        #                    nodeIn.treeNodeRelease();
        #                    nodeIn          = null;
        #                }
        #                if (!nodeInParent.equal(_childNode))
        #                {
        #                    nodeInParent.treeNodeRelease();
        #                    nodeInParent    = null;
        #                }
        #
        #                nodeNameListWithRelease( nodeInParentPath, nodeInParentName);
        #            }
        #        }
        #    }
        #    // GRD_AOTNewWindow, , aruz, 16.04.2018 <--
        #    void nodeNameList( TreeNode _node)
        #    {
        #        ;
        #        if (_node)
        #        {
        #            nodeNameList.addStart(_node.treeNodeName());
        #            if (!endParentNode || _node.treeNodePath() == endParentNode.treeNodePath())
        #                return;
        #            nodeNameList(_node.AOTparent());
        #        }
        #    }
        #    void sendName(str _name)
        #    {
        #        char    char;
        #        int     i, result;
        #        ;
        #        for (i=0;i<strlen(_name);i++)
        #        {
        #            char = substr(_name,i+1,1);
        #            result = winapi::sendMessageEx(wndHandle, #WM_CHAR, char2num(char, 1), 0);
        #
        #            if (char == " ")
        #                break;
        #        }
        #    }
        #    boolean selectedNameIs( str _findName)
        #    {
        #        LastAotSelection    lastAotSelection;
        #        str selectedName;
        #        ;
        #        lastAotSelection = new LastAotSelection();
        #        if (lastAotSelection.selectionCount())
        #        {
        #            selectedName = lastAotSelection.first().treeNodeName();
        #        }
        #        lastAotSelection.finalize();
        #        return selectedName == _findName;
        #    }
        #    ;
        #    //if (!SysUserInfo::aotNewWindowAsChild_MRC())
        #    //{
        #    //    return false;
        #    //}
        #
        #    node = _childNode;
        #    if (!node)
        #    {
        #        return false;
        #    }
        #    nodeNameList = new List(Types::String);
        #    endParentNode   = lukOpenedNodeWindows::treeNode2ParentNodeS(_childNode);
        #    childNodePath = node.treeNodePath();
        #    // GRD_AOTNewWindow, , aruz, 15.04.2018 -->
        #    nodeNameListWithRelease( _childNode.treeNodePath(), _childNode.treeNodeName());
        #    /*
        #    nodeNameList( _childNode);
        #    */
        #    // GRD_AOTNewWindow, , aruz, 15.04.2018 <--
        #    node = TreeNode::findNode(childNodePath);
        #    nodeParent = endParentNode;
        #    if (!nodeParent)
        #    {
        #        childNodeOpen = false;
        #    }
        #    else
        #    {
        #      //nodeNameList.addStart(nodeParent.treeNodeName());
        #
        #        wndHandleParent = nodeParent.AOTnewWindow();
        #        wndHandle = winapi::getWindow(wndHandleParent, #GW_CHILD);
        #        wndHandle = winapi::getWindow(wndHandle, #GW_HWNDNEXT);
        #
        #        le = nodeNameList.getEnumerator();
        #        while (le.moveNext())
        #        {
        #
        #            findName = le.current();
        #            if (curUserId()=='7101014')
        #            {
        #                info(findName);
        #            }
        #
        #            ii = 0;
        #            while (ii < 100)
        #            {
        #                if ( selectedNameIs( findName))
        #                {
        #                    if (ii + 1 < nodeNameList.elements())
        #                    {
        #                        winapi::sendMessageEx(wndHandle, #WM_KEYDOWN, #VK_RIGHT, 0);
        #                    }
        #                    break;
        #                }
        #                else
        #                {
        #                    winapi::sendMessageEx(wndHandle, #WM_KEYDOWN, #VK_DOWN, 0);
        #                    sendName( findName);
        #                    iSpace = 0;
        #                    while ( !selectedNameIs( findName) && (iSpace <= 10))
        #                    {
        #                        winapi::sendMessageEx(wndHandle, #WM_CHAR, char2num(" ", 1), 0);
        #                        iSpace++;
        #                    }
        #                }
        #                ii++;
        #            }
        #        }
        #        if ( selectedNameIs( node.treeNodeName()))
        #        {
        #            new lukOpenedNodeWindows().addNodePath( node.treeNodePath(), wndHandleParent);
        #            WinAPI::setFocus( wndHandleParent);
        #            childNodeOpen = true;
        #        }
        #        else
        #        {
        #            winapi::destroyWindow( wndHandleParent);
        #            childNodeOpen = false;
        #        }
        #    }
        #    return childNodeOpen;
        #}
      ENDSOURCE
      SOURCE #aotStructList
        #static List aotStructList()
        #{
        #    List list = new List(Types::String);
        #    ;
        #
        #    list.addEnd('\\');
        #    list.addEnd('\\Data Dictionary');
        #    list.addEnd('\\Data Dictionary\\Tables');
        #    list.addEnd('\\Data Dictionary\\Maps');
        #    list.addEnd('\\Data Dictionary\\Views');
        #    list.addEnd('\\Data Dictionary\\Extended Data Types');
        #    list.addEnd('\\Data Dictionary\\Base Enums');
        #    list.addEnd('\\Data Dictionary\\License Codes');
        #    list.addEnd('\\Data Dictionary\\Configuration Keys');
        #    list.addEnd('\\Data Dictionary\\Security Keys');
        #    list.addEnd('\\Data Dictionary\\Table Collections');
        #    list.addEnd('\\Data Dictionary\\Perspectives');
        #    list.addEnd('\\Macros');
        #    list.addEnd('\\Classes');
        #    list.addEnd('\\Forms');
        #    list.addEnd('\\Reports');
        #    list.addEnd('\\Reports\\Report Templates');
        #    list.addEnd('\\Reports\\Section Templates');
        #    list.addEnd('\\Queries');
        #    list.addEnd('\\Jobs');
        #    list.addEnd('\\Menus');
        #    list.addEnd('\\Menu Items');
        #    list.addEnd('\\Menu Items\\Display');
        #    list.addEnd('\\Menu Items\\Output');
        #    list.addEnd('\\Menu Items\\Action');
        #    list.addEnd('\\Web');
        #    list.addEnd('\\Web\\Web Forms');
        #    list.addEnd('\\Web\\Web Reports');
        #    list.addEnd('\\Web\\Web Menu Items');
        #    list.addEnd('\\Web\\Web Menu Items\\URLs');
        #    list.addEnd('\\Web\\Web Menu Items\\Actions');
        #    list.addEnd('\\Web\\Web Content');
        #    list.addEnd('\\Web\\Web Content\\Display');
        #    list.addEnd('\\Web\\Web Content\\Output');
        #    list.addEnd('\\Web\\Web Menus');
        #    list.addEnd('\\Web\\Web Files');
        #    list.addEnd('\\Web\\Web Files\\Web Parts');
        #    list.addEnd('\\Web\\Web Files\\Site Definitions');
        #    list.addEnd('\\Web\\Web Files\\Site Templates');
        #    list.addEnd('\\Web\\Web Files\\Page Definitions');
        #    list.addEnd('\\Web\\Web Files\\Static Files');
        #    list.addEnd('\\Web\\Weblets');
        #    list.addEnd('\\Resources');
        #    list.addEnd('\\References');
        #    list.addEnd('\\System Documentation');
        #    list.addEnd('\\System Documentation\\Global');
        #    list.addEnd('\\System Documentation\\Property');
        #    list.addEnd('\\System Documentation\\Reserved Words');
        #    list.addEnd('\\System Documentation\\Functions');
        #    list.addEnd('\\System Documentation\\Tables');
        #    list.addEnd('\\System Documentation\\Types');
        #    list.addEnd('\\System Documentation\\Enums');
        #    list.addEnd('\\System Documentation\\Classes');
        #    list.addEnd('\\Application Developer Documentation');
        #    list.addEnd('\\Application Developer Documentation\\Tables');
        #    list.addEnd('\\Application Developer Documentation\\Classes');
        #    list.addEnd('\\Application Documentation');
        #    list.addEnd('\\Application Documentation\\Help Topics');
        #    list.addEnd('\\Application Documentation\\Task Panes');
        #    list.addEnd('\\Application Documentation\\Hints');
        #    list.addEnd('\\Application Documentation\\Global');
        #    list.addEnd('\\Application Documentation\\Extended Data Types');
        #    list.addEnd('\\Application Documentation\\Base Enums');
        #    list.addEnd('\\Application Documentation\\License Codes');
        #    list.addEnd('\\Application Documentation\\Configuration Keys');
        #    list.addEnd('\\Application Documentation\\Security Keys');
        #    list.addEnd('\\Application Documentation\\Tables');
        #    list.addEnd('\\Application Documentation\\Menu Items');
        #    list.addEnd('\\Application Documentation\\Menu Items\\Display');
        #    list.addEnd('\\Application Documentation\\Menu Items\\Output');
        #    list.addEnd('\\Application Documentation\\Menu Items\\Action');
        #    list.addEnd('\\Application Documentation\\Forms');
        #    list.addEnd('\\Application Documentation\\Web forms');
        #    list.addEnd('\\Application Documentation\\Reports');
        #    list.addEnd('\\Application Documentation\\Queries');
        #    list.addEnd('\\Application Documentation\\Classes');
        #    list.addEnd('\\Application Documentation\\Web Menu Items');
        #    list.addEnd('\\Application Documentation\\Web Menu Items\\URL');
        #    list.addEnd('\\Application Documentation\\Web Menu Items\\Action');
        #    list.addEnd('\\Application Documentation\\Web Content Items');
        #    list.addEnd('\\Application Documentation\\Web Content Items\\Display');
        #    list.addEnd('\\Application Documentation\\Web Content Items\\Output');
        #    list.addEnd('\\Application Documentation\\Weblet Items');
        #    list.addEnd('\\HTML Help Files');
        #
        #    return list;
        #}
      ENDSOURCE
      SOURCE #treeNode2ParentNodeS
        #// HKFramework_1_0, GRD, aruz, 17.06.2017
        #static TreeNode treeNode2ParentNodeS(TreeNode _treeNode)
        #{
        #    TreeNode            treeNode = _treeNode;
        #    TreeNode            parentTreeNode;
        #    List                aotStructList = lukOpenedNodeWindows::aotStructList();
        #
        #    boolean inList(List _list, treeNodePath _path)
        #    {
        #        ListEnumerator  listEnumerator;
        #        boolean         ret;
        #        ;
        #        listEnumerator = _list.getEnumerator();
        #
        #        while (listEnumerator.moveNext())
        #        {
        #            if (listEnumerator.current() == _path)
        #            {
        #                ret = true;
        #                break;
        #            }
        #        }
        #
        #        return ret;
        #    }
        #    ;
        #
        #    if (!_treeNode)
        #        return null;
        #
        #    parentTreeNode = treeNode.AOTparent();
        #
        #    while (parentTreeNode && !inList(aotStructList, parentTreeNode.treeNodePath()))
        #    {
        #        treeNode        = parentTreeNode;
        #        parentTreeNode  = treeNode.AOTparent();
        #    }
        #
        #    return parentTreeNode ? treeNode : null;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysSetupForm
  PROPERTIES
    Name                #SysSetupForm
    Origin              #{7A462486-4937-446C-998A-A43A9E160459}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #class FormRun extends ObjectRun
      #{
      #    #resAppl
      #    #resource
      #
      #    SysSetupForm            sysSetupForm;
      #
      #    str                     treeAllFieldsText;
      #
      #    int                     lastParentIdx;
      #    int                     lastIdx;
      #
      #    container               visibleCon;
      #    container               allowEditCon;
      #
      #    UtilElements            utilElements;
      #    Name                    lastValueDesignName;
      #    userId                  lastValueUserId;
      #
      #    boolean                 loadFromUser;
      #
      #    Map                     loadFromUserMap;
      #
      #    boolean                 showDevInfo;
      #    ImageListAppl_Query     imagelist;
      #
      #    // Yellow Message Bar Control
      #    Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessagePane yellowBarPane;
      #    Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessageBar yellowBar;
      #    Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessageBarType yellowBarType;
      #
      #// #! INCIDENT !#.LAST.07.09.16.SMC:
      #    FormControl           formControlDataSource;
      #// #! INCIDENT !#.LAST.07.09.16.SMC:
      #}
    ENDSOURCE
    SOURCE #CalculateNodeTextForRelations
      #/// <summary>
      #/// Calculates the nodeText for the relation with the given table and field names.
      #/// </summary>
      #/// <param name="sourceTable">
      #/// The source TableId.
      #/// </param>
      #/// <param name="relatedTable">
      #/// The related TableId.
      #/// </param>
      #/// <param name="sourceField">
      #/// The source FieldId;
      #/// </param>
      #/// <param name="relatedField">
      #/// the related FieldId;
      #/// </param>
      #/// <returns>
      #/// The nodeText for the given table and field names.
      #/// </returns>
      #private str CalculateNodeTextForRelations(TableId sourceTable, TableId relatedTable, FieldId sourceField, FieldId relatedField)
      #{
      #    DictField sourceDictField;
      #    DictField relatedDictField;
      #
      #    str nodeText;
      #
      #    str relatedTableName = tableid2name(relatedTable);
      #    str sourceTableName = tableid2name(sourceTable);
      #    str sourceFieldName;
      #    str relatedFieldName;
      #
      #    if(relatedField)
      #    {
      #        relatedDictField = SysDictField::findFieldById(relatedTable, relatedField);
      #        if(relatedDictField)
      #        {
      #            relatedFieldName = relatedDictField.name();
      #            if(relatedDictField.tableid() != relatedTable)
      #            {
      #                //If the field belongs on a derived table, add that table's context.
      #                relatedTableName = relatedTableName + ' (' + tableid2name(relatedDictField.tableid()) + ')';
      #            }
      #        }
      #    }
      #
      #    if(sourceField)
      #    {
      #        sourceDictField = SysDictField::findFieldById(sourceTable, sourceField);
      #        if(sourceDictField)
      #        {
      #            sourceFieldName = sourceDictField.name();
      #
      #            sourceFieldName = sourceDictField.name();
      #            if(sourceDictField.tableid() != sourceTable)
      #            {
      #                //If the field belongs on a derived table, add that table's context.
      #                sourceTableName = sourceTableName + ' (' + tableid2name(sourceDictField.tableid()) + ')';
      #            }
      #        }
      #    }
      #
      #    nodeText = strfmt('%1.%2 == %3.%4', relatedTableName, relatedFieldName, sourceTableName, sourceFieldName);
      #
      #    return nodeText;
      #}
    ENDSOURCE
    SOURCE #changeSelection
      #void changeSelection(FormControl control)
      #{
      #    int idx = 0;
      #    ;
      #    if (control)
      #    {
      #        idx = sysSetupForm.formControlTreeControl2Idx(control.id(), controlTree.getRoot());
      #        if (idx)
      #        {
      #            controlTree.select( idx );
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #    ;
      #    sysSetupForm.fieldFormRunClose();
      #    super();
      #}
    ENDSOURCE
    SOURCE #closeSelectRecord
      #public void closeSelectRecord(Common _selectedRecord)
      #{
      #    super(_selectedRecord);
      #}
    ENDSOURCE
    SOURCE #createYellowBarMessagePane
      #private void createYellowBarMessagePane()
      #{
      #    // grab the instance of the message bar control and set its properties
      #    yellowBarPane = YellowBarMessagePane.control();
      #
      #    // we're not using any actions, so we don't need the control to be part of the tab sequence
      #    yellowBarPane.set_Enabled(false);
      #
      #    // we'll host a single message
      #    yellowBarPane.set_MaximumMessageBars(1);
      #}
      #
    ENDSOURCE
    SOURCE #disableLayoutChanges
      #public void disableLayoutChanges()
      #{
      #    FormRun editFormRun;
      #
      #    ControlGrp.enabled(false);
      #    PropertiesGroup.enabled(false);
      #    QueryTree.enabled(false);
      #
      #    // Show the warning
      #    this.showWarningMessage();
      #
      #    // Disable any other changes and prevent the new value in SysLastValues from being overwritten.
      #    editFormRun = element.args().caller();
      #    editFormRun.blockPersonalization(true);
      #    editFormRun.skipSaveUserSetting(true);
      #}
    ENDSOURCE
    SOURCE #fillQueryTree
      #void fillQueryTree()
      #{
      #    int                     rootid;
      #    int                     treeId;
      #    int                     dataSourceNo;
      #    FormTreeItem            formTreeItem;
      #    FormDataSource          formRunDataSource;
      #    str                     nodeText;
      #
      #    FormRun                 setupRunForm;
      #    Form                    setupForm;
      #
      #    boolean                 queryExist;
      #    ;
      #
      #    if (!showDevInfo || !element.args().caller())
      #    {
      #        queryPage.visible(false);
      #        return;
      #    }
      #
      #    setupRunForm    = element.args().caller();
      #    setupForm       = setupRunForm.form();
      #
      #    queryTree.setImagelist( imagelist.imageList() );
      #
      #    // BP deviation documented
      #    formTreeItem = new FormTreeItem(setupForm.name(),imagelist.image(#ImageForm),-1,null);
      #    rootId = queryTree.addItem(0,FormTreeAdd::Root,formTreeItem);
      #
      #    for (datasourceNo = 1; dataSourceNo <= setupForm.dataSourceCount(); dataSourceNo++)
      #    {
      #        formRunDataSource = setupRunForm.dataSource(dataSourceNo);
      #
      #        if (formRunDataSource.equal(formRunDataSource.masterObjectSet()))
      #        {
      #            nodeText = setupForm.dataSource(dataSourceNo).name();
      #            // BP deviation documented
      #            formTreeItem = new FormTreeItem(nodeText,imagelist.image(#ImageQuery),1,null);
      #
      #            treeId = queryTree.addItem(rootId,FormTreeAdd::Last,formTreeItem);
      #
      #            this.fillQueryTreeFormDatasource(formRunDataSource, treeId);
      #
      #            queryTree.expand(treeId,FormTreeExpand::Expand);
      #
      #            queryExist = true;
      #        }
      #    }
      #
      #    queryTree.expand(rootId,FormTreeExpand::Expand);
      #
      #    if (!queryExist)
      #        queryPage.visible(false);
      #}
    ENDSOURCE
    SOURCE #fillQueryTreeFormDatasource
      #void fillQueryTreeFormDatasource(FormDataSource formDataSource, int rootId)
      #{
      #    Query                   query;
      #    QueryBuildDataSource    queryBuildDataSource;
      #    int                     i;
      #
      #    if (! formDataSource.queryRun())
      #        return;
      #
      #    query    = formDataSource.queryRun().query();
      #
      #    for (i = 1; i <= query.childDataSourceCount(); i++)
      #    {
      #        queryBuildDataSource = query.childDataSourceNo(i);
      #
      #        this.fillQueryTreeQueryDatasource(queryBuildDataSource, rootId, true);
      #    }
      #}
    ENDSOURCE
    SOURCE #fillQueryTreeQueryDatasource
      #void fillQueryTreeQueryDatasource(QueryBuildDataSource queryBuildDataSource, int rootId, boolean top = false)
      #{
      #    int                 i;
      #
      #    QueryBuildDataSource    childDatasource;
      #    QueryBuildFieldList     queryBuildFieldList;
      #    QueryBuildRange         queryBuildRange;
      #    QueryBuildLink          queryBuildLink;
      #    QueryBuildDynalink      queryBuildDynalink;
      #
      #    int                     sourceRootId;
      #    int                     treeId;
      #    FormTreeItem            formTreeItem;
      #    str                     nodeText;
      #    int                     imageNo;
      #    DictField               dictField;
      #    boolean                 addField;
      #
      #    if (queryBuildDataSource.enabled())
      #    {
      #        nodeText = tableid2name(queryBuildDataSource.table());
      #        if (nodeText != queryBuildDataSource.name())
      #            nodeText = strfmt('%1 (%2)',queryBuildDataSource.name(),nodeText);
      #
      #        // BP deviation documented
      #        formTreeItem = new FormTreeItem(nodeText,imagelist.image(#ImageDataSource),-1,null);
      #        sourceRootId = queryTree.addItem(rootId, FormTreeAdd::Last, formTreeItem);
      #
      #        // Dynalink
      #
      #        if (queryBuildDataSource.dynalinkCount())
      #        {
      #            formTreeItem = new FormTreeItem('Dynalink',imagelist.image(#ImageRelations),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #
      #            for (i = 1; i <= queryBuildDataSource.dynalinkCount(); i++)
      #            {
      #                queryBuildDynalink = queryBuildDataSource.dynalink(i);
      #
      #                nodeText = this.CalculateNodeTextForRelations(queryBuildDynalink.cursor().TableId,
      #                    queryBuildDataSource.table(),
      #                    queryBuildDynalink.dynamicField(),
      #                    queryBuildDynalink.field());
      #
      #                // BP deviation documented
      #                formTreeItem = new FormTreeItem(nodeText,imagelist.image(#ImageRelation),-1,null);
      #                queryTree.addItem(treeId,FormTreeAdd::Last,formTreeItem);
      #            }
      #        }
      #
      #        // Fields
      #
      #        queryBuildFieldList = queryBuildDataSource.fields();
      #
      #        if (!queryBuildFieldList.dynamic())
      #        {
      #            formTreeItem = new FormTreeItem('Fields',imagelist.image(#ImageFields),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #
      #            for (i = 1; i <= queryBuildFieldList.fieldCount(); i ++)
      #            {
      #                imageNo = -1;
      #                addField = false;
      #                nodeText = '';
      #                if (queryBuildFieldList.fieldKind(i) != SelectionField::Database)
      #                {
      #                    nodeText = strfmt('%1(%2)',queryBuildFieldList.fieldKind(i),fieldid2name(queryBuildDataSource.table(),queryBuildFieldList.field(i)));
      #                    imageNo = imagelist.findFieldKind(queryBuildFieldList.fieldKind(i));
      #                    addField = true;
      #                }
      #                else
      #                {
      #
      #                    if (dictField)
      #                    {
      #                        nodeText = fieldid2name(queryBuildDataSource.table(),queryBuildFieldList.field(i));
      #                        imageNo = imagelist.findFieldImage(dictField.baseType());
      #                        addField = true;
      #                    }
      #                }
      #
      #                if (addField)
      #                {
      #                    // BP deviation documented
      #                    formTreeItem = new FormTreeItem(nodeText,imageNo,-1,null);
      #                    queryTree.addItem(treeId,FormTreeAdd::Last,formTreeItem);
      #                }
      #            }
      #        }
      #
      #        // Sorting
      #
      #        if (queryBuildDataSource.sortFieldCount())
      #        {
      #
      #            switch(queryBuildDataSource.orderMode())
      #            {
      #                case OrderMode::OrderBy:
      #                    nodeText = 'Order by';
      #                    break;
      #                case OrderMode::GroupBy:
      #                    nodeText = 'Group by';
      #                    break;
      #            }
      #            // BP deviation documented
      #            formTreeItem = new FormTreeItem(strfmt('Sorting (%1)',nodeText),imagelist.image(#ImageQuerySortings),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #
      #            for (i = 1; i <= queryBuildDataSource.sortFieldCount(); i++)
      #            {
      #                nodeText = fieldid2name(queryBuildDataSource.table(),queryBuildDataSource.sortField(i));
      #
      #                if (queryBuildDataSource.sortDirection(i) == SortOrder::Ascending)
      #                {
      #                    imageNo = imagelist.image(#ImageQuerySortingAscending);
      #                }
      #                else
      #                {
      #                    imageNo = imagelist.image(#ImageQuerySortingDescending);
      #                }
      #
      #                // BP deviation documented
      #                formTreeItem = new FormTreeItem(nodeText,imageNo,-1,null);
      #                queryTree.addItem(treeId,FormTreeAdd::Last,formTreeItem);
      #            }
      #        }
      #
      #        // Index ?
      #
      #        if (queryBuildDataSource.sortIndexCount())
      #        {
      #            nodeText = strfmt('Index: %1',indexid2name(queryBuildDataSource.table(),queryBuildDataSource.sortIndex(1)));
      #
      #            // BP deviation documented
      #            formTreeItem = new FormTreeItem(nodeText,imagelist.image(#ImageQuerySortings),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #        }
      #
      #        // Ranges
      #
      #        if (queryBuildDataSource.rangeCount())
      #        {
      #            formTreeItem = new FormTreeItem('Ranges',imagelist.image(#ImageQueryRange),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #
      #            for (i = 1; i <= queryBuildDataSource.rangeCount(); i++)
      #            {
      #                queryBuildRange = queryBuildDataSource.range(i);
      #                nodeText = strfmt('%1 == %2',fieldid2name(queryBuildDataSource.table(),queryBuildRange.field()),queryBuildRange.value());
      #
      #                dictField = SysDictField::findFieldById(queryBuildDataSource.table(), queryBuildRange.field());
      #                imageNo = imagelist.findFieldImage(dictField.baseType());
      #
      #                // BP deviation documented
      #                formTreeItem = new FormTreeItem(nodeText,imageNo,-1,null);
      #                queryTree.addItem(treeId,FormTreeAdd::Last,formTreeItem);
      #            }
      #        }
      #
      #        // Relation
      #
      #        if (queryBuildDataSource.linkCount())
      #        {
      #            formTreeItem = new FormTreeItem('Relation',imagelist.image(#ImageRelations),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #
      #            for (i = 1; i <= queryBuildDataSource.linkCount(); i++)
      #            {
      #                queryBuildLink = queryBuildDataSource.link(i);
      #
      #                nodeText = this.CalculateNodeTextForRelations(queryBuildLink.table(),
      #                    queryBuildLink.relatedTable(),
      #                    queryBuildLink.field(),
      #                    queryBuildLink.relatedField());
      #
      #                // Add the context of the joinRelation name if it is specified.
      #                // This is for Surrogate Foreign Key scenarios where the fields aren't specified in the link.
      #                if(queryBuildLink.joinRelation())
      #                {
      #                    nodeText += ' Role: ' + queryBuildLink.joinRelation();
      #                }
      #
      #                // BP deviation documented
      #                formTreeItem = new FormTreeItem(nodeText,imagelist.image(#ImageRelation),-1,null);
      #                queryTree.addItem(treeId,FormTreeAdd::Last,formTreeItem);
      #            }
      #        }
      #
      #        // Datasources
      #
      #        if (queryBuildDataSource.childDataSourceCount())
      #        {
      #            formTreeItem = new FormTreeItem('Data Sources',imagelist.image(#ImageDataSources),-1,null);
      #            treeId  = queryTree.addItem(sourceRootId,FormTreeAdd::Last,formTreeItem);
      #
      #            for (i = 1; i <= queryBuildDataSource.childDataSourceCount(); i++)
      #            {
      #                childDatasource = queryBuildDataSource.childDataSourceNo(i);
      #                this.fillQueryTreeQueryDatasource(childDatasource, treeId);
      #            }
      #            queryTree.expand(treeId,FormTreeExpand::Expand);
      #        }
      #
      #        queryTree.expand(sourceRootId,FormTreeExpand::Expand);
      #    }
      #}
    ENDSOURCE
    SOURCE #formControlBuildText
      #// Label with development information
      #str formControlBuildText(FormRun formRun,FormControl formControl)
      #{
      #    FormStringControl       formStringControl;
      #    FormRealControl         formRealControl;
      #    FormIntControl          formIntControl;
      #    FormDateControl         formDateControl;
      #    FormTimeControl         formTimeControl;
      #    FormDateTimeControl     formDateTimeControl;
      #
      #    FormCheckBoxControl     formCheckBoxControl;
      #    FormListBoxControl      formListBoxControl;
      #    FormComboBoxControl     formComboBoxControl;
      #    FormRadioControl        formRadioControl;
      #
      #    FormGroupControl        formGroupControl;
      #    FormReferenceControl    formReferenceControl;
      #    FormBuildFunctionButtonControl formBuildFunctionButtonControl;
      #    MenuItemType            menuItemType;
      #    MenuFunction            menuFunction;
      #
      #    str                     controlText;
      #
      #    int                     dataSource;
      #    str                     dataSourceName;
      #    tableId                 tableId;
      #
      #    int                     dataField;
      #    str                     dataFieldName;
      #    int                     dataIndex;
      #    str                     dataMethod;
      #    str                     dataGroup;
      #    str                     menuFunctionClass;
      #
      #    switch(formControl.handle())
      #    {
      #        case classnum(FormStringControl):
      #
      #            formStringControl = formControl;
      #
      #            dataSource  = formStringControl.dataSource();
      #            dataField   = formStringControl.dataField();
      #            dataMethod  = formStringControl.dataMethod();
      #            dataIndex   = formStringControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormRealControl):
      #
      #            formRealControl = formControl;
      #
      #            dataSource  = formRealControl.dataSource();
      #            dataField   = formRealControl.dataField();
      #            dataMethod  = formRealControl.dataMethod();
      #            dataIndex   = formRealControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormIntControl):
      #
      #            formIntControl = formControl;
      #
      #            dataSource  = formIntControl.dataSource();
      #            dataField   = formIntControl.dataField();
      #            dataMethod  = formIntControl.dataMethod();
      #            dataIndex   = formIntControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormDateControl):
      #
      #            formDateControl = formControl;
      #
      #            dataSource  = formDateControl.dataSource();
      #            dataField   = formDateControl.dataField();
      #            dataMethod  = formDateControl.dataMethod();
      #            dataIndex   = formDateControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormTimeControl):
      #
      #            formTimeControl = formControl;
      #
      #            dataSource  = formTimeControl.dataSource();
      #            dataField   = formTimeControl.dataField();
      #            dataMethod  = formTimeControl.dataMethod();
      #            dataIndex   = formTimeControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormDateTimeControl):
      #
      #            formDateTimeControl = formControl;
      #
      #            dataSource  = formDateTimeControl.dataSource();
      #            dataField   = formDateTimeControl.dataField();
      #            dataMethod  = formDateTimeControl.dataMethod();
      #            dataIndex   = formDateTimeControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormCheckBoxControl):
      #
      #            formCheckBoxControl = formControl;
      #
      #            dataSource  = formCheckBoxControl.dataSource();
      #            dataField   = formCheckBoxControl.dataField();
      #            dataMethod  = formCheckBoxControl.dataMethod();
      #            break;
      #
      #        case classnum(FormListBoxControl):
      #
      #            formListBoxControl = formControl;
      #
      #            dataSource  = formListBoxControl.dataSource();
      #            dataField   = formListBoxControl.dataField();
      #            dataMethod  = formListBoxControl.dataMethod();
      #            dataIndex   = formListBoxControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormComboBoxControl):
      #
      #            formComboBoxControl = formControl;
      #
      #            dataSource  = formComboBoxControl.dataSource();
      #            dataField   = formComboBoxControl.dataField();
      #            dataMethod  = formComboBoxControl.dataMethod();
      #            dataIndex   = formComboBoxControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormRadioControl):
      #
      #            formRadioControl = formControl;
      #
      #            dataSource  = formRadioControl.dataSource();
      #            dataField   = formRadioControl.dataField();
      #            dataMethod  = formRadioControl.dataMethod();
      #            dataIndex   = formRadioControl.arrayIndex();
      #            break;
      #
      #        case classnum(FormGroupControl):
      #            formGroupControl = formControl;
      #
      #            dataSource  = formGroupControl.dataSource();
      #            if (formGroupControl.dataGroup())
      #                dataGroup = formGroupControl.caption();
      #
      #            break;
      #
      #        case classnum(FormFunctionButtonControl):
      #
      #            formBuildFunctionButtonControl = formRun.form().design().control(formControl.id());
      #
      #            menuItemType = formBuildFunctionButtonControl.menuItemType();
      #            controlText = strfmt('%1\n%2/%3',formControl.name(),menuItemType,formBuildFunctionButtonControl.menuItemName());
      #
      #            menuFunction = new MenuFunction(formBuildFunctionButtonControl.menuItemName(),menuItemType);
      #            if (menuFunction)
      #            {
      #                switch(menuFunction.objectType())
      #                {
      #                    case UtilElementType::Form:
      #                        menuFunctionClass = 'Form';
      #                        break;
      #
      #                    case UtilElementType::Report:
      #                        menuFunctionClass = 'Report';
      #                        break;
      #
      #                    case UtilElementType::Job:
      #                        menuFunctionClass = 'Job';
      #                        break;
      #
      #                    case UtilElementType::Class:
      #                        menuFunctionClass = 'Class';
      #                        break;
      #
      #                    case UtilElementType::Query:
      #                        menuFunctionClass = 'Query';
      #                        break;
      #
      #                    default:
      #                        menuFunctionClass = '';
      #
      #                }
      #                controlText = strfmt('%1  - > %2/%3',controlText,menuFunctionClass,menuFunction.object());
      #            }
      #
      #            return controlText;
      #
      #        case classnum(FormReferenceGroupControl):
      #        case classnum(FormSegmentedEntryControl):
      #
      #            formReferenceControl = formControl;
      #
      #            dataSource  = formReferenceControl.dataSource();
      #            dataField   = formReferenceControl.dataField();
      #            dataGroup   = formReferenceControl.replacementFieldGroup();
      #
      #            break;
      #
      #
      #        default:
      #            return formControl.name();
      #    }
      #
      #    controlText = formControl.name();
      #
      #    if (dataSource)
      #    {
      #        dataSourceName  = formRun.form().dataSource(dataSource).name();
      #
      #        tableId         = formRun.form().dataSource(dataSource).table();
      #
      #        if (dataMethod)
      #        {
      #            return strfmt('%1\n%2.%3()',formControl.name(),dataSourceName,dataMethod);
      #
      #        }
      #
      #        if (tableId && dataField)
      #        {
      #            dataFieldName = fieldid2name(tableId,dataField);
      #            controlText = strfmt('%1\n%2',formControl.name(), tableid2name(tableId));
      #
      #            if (controlText != dataSourceName)
      #            {
      #                controlText += strfmt('(%1)',dataSourceName);
      #            }
      #            controlText += strfmt('.%1',dataFieldName);
      #
      #            if (dataIndex)
      #            {
      #                controlText += strfmt('[%1]',dataIndex);
      #            }
      #        }
      #
      #        if (dataGroup)
      #        {
      #            if (formReferenceControl)
      #            {
      #                controlText += '\n' + dataGroup;
      #            }
      #            else
      #            {
      #                controlText += strfmt('%1\n%2.[%3]',formControl.name(),dataSourceName,dataGroup);
      #            }
      #        }
      #    }
      #    else if (dataMethod)
      #    {
      #        controlText = strfmt('%1\n%2()',formControl.name(),dataMethod);
      #    }
      #
      #    return controlText;
      #
      #}
    ENDSOURCE
    SOURCE #getFastTabSummary
      #FastTabSummary getFastTabSummary(FormControl control)
      #{
      #    FastTabSummary summaryValue;
      #    FormControlType controlType;
      #
      #    FormDateControl editDate;
      #    FormGuidControl editGuid;
      #    FormInt64Control editInt64;
      #    FormIntControl editInt;
      #    FormStringControl editString;
      #    FormTimeControl editTime;
      #    FormRealControl editReal;
      #    FormDateTimeControl editDateTime;
      #    ;
      #
      #    controlType = SysFormRun::controlType(classIdGet(control));
      #
      #    switch (controlType)
      #    {
      #        case FormControlType::Date:
      #            editDate = control;
      #            summaryValue = editDate.fastTabSummary();
      #            break;
      #        case FormControlType::Guid:
      #            editGuid = control;
      #            summaryValue = editGuid.fastTabSummary();
      #            break;
      #        case FormControlType::Int64:
      #            editInt64 = control;
      #            summaryValue = editInt64.fastTabSummary();
      #            break;
      #        case FormControlType::Integer:
      #            editInt = control;
      #            summaryValue = editInt.fastTabSummary();
      #            break;
      #        case FormControlType::String:
      #            editString = control;
      #            summaryValue = editString.fastTabSummary();
      #            break;
      #        case FormControlType::Time:
      #            editTime = control;
      #            summaryValue = editTime.fastTabSummary();
      #            break;
      #        case FormControlType::Real:
      #            editReal = control;
      #            summaryValue = editReal.fastTabSummary();
      #            break;
      #        case FormControlType::DateTime:
      #            editDateTime = control;
      #            summaryValue = editDateTime.fastTabSummary();
      #            break;
      #    }
      #
      #    return summaryValue;
      #}
    ENDSOURCE
    SOURCE #getUserFastTabSummary
      #FastTabSummary getUserFastTabSummary(FormControl control)
      #{
      #    int summaryValue;
      #    FormControlType controlType;
      #
      #    FormDateControl editDate;
      #    FormGuidControl editGuid;
      #    FormInt64Control editInt64;
      #    FormIntControl editInt;
      #    FormStringControl editString;
      #    FormTimeControl editTime;
      #    FormRealControl editReal;
      #    FormDateTimeControl editDateTime;
      #    ;
      #
      #    controlType = SysFormRun::controlType(classIdGet(control));
      #
      #    switch (controlType)
      #    {
      #        case FormControlType::Date:
      #            editDate = control;
      #            summaryValue = editDate.userFastTabSummary();
      #            break;
      #        case FormControlType::Guid:
      #            editGuid = control;
      #            summaryValue = editGuid.userFastTabSummary();
      #            break;
      #        case FormControlType::Int64:
      #            editInt64 = control;
      #            summaryValue = editInt64.userFastTabSummary();
      #            break;
      #        case FormControlType::Integer:
      #            editInt = control;
      #            summaryValue = editInt.userFastTabSummary();
      #            break;
      #        case FormControlType::String:
      #            editString = control;
      #            summaryValue = editString.userFastTabSummary();
      #            break;
      #        case FormControlType::Time:
      #            editTime = control;
      #            summaryValue = editTime.userFastTabSummary();
      #            break;
      #        case FormControlType::Real:
      #            editReal = control;
      #            summaryValue = editReal.userFastTabSummary();
      #            break;
      #        case FormControlType::DateTime:
      #            editDateTime = control;
      #            summaryValue = editDateTime.userFastTabSummary();
      #            break;
      #    }
      #
      #    if (summaryValue == -1)
      #    {
      #        summaryValue = element.getFastTabSummary(control);
      #    }
      #
      #    return summaryValue;
      #}
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    FormRun formRun;
      #    ;
      #    treeAllFieldsText   = "@SYS6047";
      #
      #    super();
      #
      #    if (element.args().caller() &&
      #        SysDictClass::isEqualOrSuperclass(classidget(element.args().caller()), classnum(FormRun)))
      #    {
      #        formRun = element.args().caller();
      #    }
      #    else
      #    {
      #        formRun = this;
      #    }
      #
      #    lastValueUserId = curuserid();
      #
      #    sysSetupForm = new SysSetupForm(formRun, this);
      #    sysSetupForm.parmFormControlTree(controlTree);
      #
      #    element.args().object(sysSetupForm);
      #
      #    showDevInfo = Global::isDeveloper();
      #    devControlName.visible(showDevInfo);
      #    imagelist = new ImageListAppl_Query();
      #
      #    ControlFastTabSummary.enumType(enumNum(FastTabSummary));
      #
      #    this.createYellowBarMessagePane();
      #}
      #
    ENDSOURCE
    SOURCE #initParmDefault
      #public void initParmDefault()
      #{
      #}
    ENDSOURCE
    SOURCE #isEditControl
      #Boolean isEditControl(FormControl control)
      #{
      #    FormControlType controlType;
      #    Boolean isEdit = false;
      #
      #    controlType = SysFormRun::controlType(classIdGet(control));
      #
      #    switch (controlType)
      #    {
      #        case FormControlType::Date:
      #        case FormControlType::Guid:
      #        case FormControlType::Int64:
      #        case FormControlType::Integer:
      #        case FormControlType::String:
      #        case FormControlType::Time:
      #        case FormControlType::Real:
      #        case FormControlType::DateTime:
      #            isEdit = true;
      #            break;
      #    }
      #
      #    return isEdit;
      #}
    ENDSOURCE
    SOURCE #lastValueDataAreaId
      #dataAreaId lastValueDataAreaId()
      #{
      #    return curext();
      #}
    ENDSOURCE
    SOURCE #lastValueDesignName
      #private identifiername lastValueDesignName()
      #{
      #    return lastValueDesignName;
      #}
    ENDSOURCE
    SOURCE #lastValueElementName
      #private identifiername lastValueElementName()
      #{
      #    return sysSetupForm.getFormName();
      #}
    ENDSOURCE
    SOURCE #lastValueType
      #private UtilElementType lastValueType()
      #{
      #    return UtilElementType::Usersetup;
      #}
    ENDSOURCE
    SOURCE #lastValueUserId
      #private userId lastValueUserId()
      #{
      #    return lastValueUserId;
      #}
    ENDSOURCE
    SOURCE #loadFromUser
      #void loadFromUser()
      #{
      #    SysLastValue sysLastValue;
      #    userId       userId;
      #    ;
      #    if (!loadFromUserMap)
      #    {
      #        loadFromUserMap     = new Map(Types::String, Types::String);
      #
      #        while select sysLastValue
      #            group by UserId
      #            where sysLastValue.Company      == this.lastValueDataAreaId()
      #               && sysLastValue.RecordType   == UtilElementType::Usersetup
      #               && sysLastValue.ElementName  == this.lastValueElementName()
      #               && sysLastValue.UserId       != curuserid()
      #               && sysLastValue.DesignName
      #        {
      #            loadFromUserMap.insert(sysLastValue.UserId, sysLastValue.UserId);
      #        }
      #    }
      #
      #    if (loadFromUserMap.elements())
      #    {
      #        userId = pickUser(loadFromUserMap, true);
      #
      #        if (userId)
      #        {
      #            element.loadSetup(userId);
      #        }
      #    }
      #    else
      #    {
      #        info("@SYS73299");
      #    }
      #}
    ENDSOURCE
    SOURCE #loadSetup
      #// AosRunMode::Client
      #public void loadSetup(userId userId)
      #{
      #    SysLastValue    sysLastValue;
      #    container       value;
      #    Name            designName,newDesignName;
      #    Map             map;
      #    SysSaveSetup    sysSaveSetup;
      #    ;
      #
      #    select firstonly sysLastValue
      #        where sysLastValue.Company      == this.lastValueDataAreaId()  &&
      #              sysLastValue.UserId       == userId                      &&
      #              sysLastValue.RecordType   == this.lastValueType()  &&
      #              sysLastValue.ElementName  == this.lastValueElementName() &&
      #              sysLastValue.DesignName   != '';
      #
      #    if (sysLastValue)
      #    {
      #        map = new Map(Types::String, Types::String);
      #
      #        while select designName from sysLastValue
      #            where sysLastValue.Company      == this.lastValueDataAreaId()   &&
      #                  sysLastValue.UserId       == userId                       &&
      #                  sysLastValue.RecordType   == this.lastValueType()         &&
      #                  sysLastValue.ElementName  == this.lastValueElementName()  &&
      #                  sysLastValue.DesignName   != ''
      #        {
      #            map.insert(sysLastValue.DesignName, sysLastValue.DesignName);
      #        }
      #
      #        designName = pickList(map, "@SYS28107","@SYS28107", true);
      #        if (designName)
      #        {
      #            value = xSysLastValue::getValue(
      #                this.lastValueDataAreaId(),
      #                userId,
      #                this.lastValueType(),
      #                this.lastValueElementName(),
      #                designName);
      #
      #            sysSaveSetup = SysSaveSetup::construct(sysSetupForm.getFormRun());
      #            newDesignName = sysSaveSetup.lastValueDesignName();
      #
      #            xSysLastValue::putValue(
      #                value,
      #                this.lastValueDataAreaId(),
      #                curUserId(),
      #                this.lastValueType(),
      #                this.lastValueElementName(),
      #                newDesignName);
      #
      #            element.disableLayoutChanges();
      #
      #        }
      #    }
      #    else
      #    {
      #        info(strfmt("@SYS28106", userId));
      #    }
      #}
    ENDSOURCE
    SOURCE #lukOpenSelectedItem
      #// lukDEVAX_aruz_AotNewWindowAsChil, aruz, 23.08.2018
      #void lukOpenSelectedItem()
      #{
      #    FormControl formControl;
      #    TreeNode    selectedNode;
      #    ;
      #
      #    formControl = sysSetupForm.formControlTreeIdx2Control(ControlTree.getFirstSelected());
      #    selectedNode = SysFormRun::ctrlId2treeNode(element.args().caller(), formControl.id());
      #    if (selectedNode)
      #    {
      #        lukOpenedNodeWindows::aotNewWindowAsChild(selectedNode);
      #
      #        if (curUserId()!='7101014')
      #        {
      #            element.close();
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #pack
      #container pack()
      #{
      #    return sysSetupForm.designPackUserSetting();
      #}
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    boolean     canEdit;
      #    ;
      #    sysSetupForm.init();
      #
      #    formName.text(          sysSetupForm.getFormName());
      #
      #    callerName.text(        sysSetupForm.getCallerName());
      #    callerEditButton.enabled((sysSetupForm.getCallerName() != ''));
      #
      #    menuItemName.text(        sysSetupForm.getMenuItemName());
      #    menuItemEditButton.enabled((sysSetupForm.getMenuItemName() != ''));
      #
      #    createdBy.text(         sysSetupForm.getElementCreatedBy());
      #    createdDate.dateValue(  DateTimeUtil::date(sysSetupForm.getElementCreatedDateTime()));
      #    createdTime.value(      DateTimeUtil::time(sysSetupForm.getElementCreatedDateTime()));
      #
      #    modifiedBy.text(        sysSetupForm.getElementModifiedBy());
      #    modifiedDate.dateValue( DateTimeUtil::date(sysSetupForm.getElementModifiedDateTime()));
      #    modifiedTime.value(     DateTimeUtil::time(sysSetupForm.getElementModifiedDateTime()));
      #
      #    canEdit = (sysSetupForm.formControlTreeAllowUserSetup(0) != FormAllowUserSetup::No);
      #
      #    mainBtnGrp.enabled(canEdit);
      #
      #    element.fillQueryTree();
      #
      #    super();
      #
      #    this.arrange();
      #}
      #
      #
    ENDSOURCE
    SOURCE #saveSetup
      #void saveSetup()
      #{
      #    DialogField     setupName;
      #    Dialog          dialog;
      #
      #    dialog = new Dialog();
      #    dialog.caption("@SYS25458");
      #    setupName = dialog.addField(extendedTypeStr(Name));
      #
      #    // Run the dialog as modal.
      #    dialog.doRun();
      #    dialog.formRun().wait(true);
      #
      #    if (!dialog.closedOk())
      #        return;
      #
      #    if (setupName.value())
      #        element.userParmWrite(setupName.value());
      #}
    ENDSOURCE
    SOURCE #selectionChanged
      #void selectionChanged(FormControl control,boolean updatePromptField = true)
      #{
      #    ;
      #    element.updateTask(control);
      #
      #    if (updatePromptField)
      #    {
      #        control.displayControl();
      #    }
      #}
    ENDSOURCE
    SOURCE #setUserFastTabSummary
      #void setUserFastTabSummary(FormControl control, FastTabSummary summaryValue)
      #{
      #    FormControlType controlType;
      #
      #    FormDateControl editDate;
      #    FormGuidControl editGuid;
      #    FormInt64Control editInt64;
      #    FormIntControl editInt;
      #    FormStringControl editString;
      #    FormTimeControl editTime;
      #    FormRealControl editReal;
      #    FormDateTimeControl editDateTime;
      #    ;
      #
      #    controlType = SysFormRun::controlType(classIdGet(control));
      #
      #    switch (controlType)
      #    {
      #        case FormControlType::Date:
      #            editDate = control;
      #            editDate.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::Guid:
      #            editGuid = control;
      #            editGuid.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::Int64:
      #            editInt64 = control;
      #            editInt64.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::Integer:
      #            editInt = control;
      #            editInt.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::String:
      #            editString = control;
      #            editString.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::Time:
      #            editTime = control;
      #            editTime.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::Real:
      #            editReal = control;
      #            editReal.userFastTabSummary(summaryValue);
      #            break;
      #        case FormControlType::DateTime:
      #            editDateTime = control;
      #            editDateTime.userFastTabSummary(summaryValue);
      #            break;
      #    }
      #}
    ENDSOURCE
    SOURCE #showWarningMessage
      #public void showWarningMessage()
      #{
      #    Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessageBarCollection bars;
      #    int barCount;
      #
      #    // Only add the message if it isn't already there
      #    bars = yellowBarPane.get_MessageBars();
      #    barCount = bars.get_Count();
      #    if (barCount == 0)
      #    {
      #        this.lock();
      #
      #        // create a message bar
      #        yellowBar = new Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessageBar();
      #
      #        // x++ mechanism for getting enum value, in this case let's make it a warning
      #        // Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessageBarType::Warning
      #        yellowBarType = Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessageBarType::Warning;
      #
      #        yellowBarPane.BeginUpdate();
      #        yellowBar.set_MessageBarType(yellowBarType);
      #        yellowBar.set_Enabled(true);
      #        yellowBar.set_Text(strFmt("@SYS345414", sysSetupForm.getFormRun().design().caption()));
      #        yellowBarPane.Add(yellowBar);
      #        yellowBarPane.EndUpdate();
      #
      #        this.arrange();
      #        this.unLock();
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #tableBrowser
      #//smc 27.09.2016 Table browser for reduced admin
      #public void tableBrowser(FormControl _formControl)
      #{
      #    FormDataSource  formDatasource = _formControl.dataSourceObject();
      #    TableId         tableId = formDatasource.table();
      #    SysTableBrowser tableBrowser;
      #    AccessRight     accessRight;
      #
      #    accessRight = SecurityRights::construct().menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(DSMTableBrowser));
      #
      #    if (accessRight >= AccessRight::View)
      #    {
      #        tableBrowser = new SysTableBrowser();
      #        tableBrowser.setAllowEdit(accessRight >= AccessRight::Edit);
      #        tableBrowser.setAllowCreate(accessRight >= AccessRight::Add);
      #        tableBrowser.setAllowDelete(accessRight >= AccessRight::Delete);
      #        tableBrowser.run(tableId);
      #    }
      #}
    ENDSOURCE
    SOURCE #toggleAllowEdit
      #void toggleAllowEdit()
      #{
      #    FormControl     activeFormControl;
      #    int             idx = controlTree.getSelection();
      #    ;
      #
      #    if (idx)
      #    {
      #        activeFormControl   = sysSetupForm.formControlTreeIdx2Control( idx );
      #        activeFormControl.userDisable(!controlAllowEdit.value());
      #        sysSetupForm.formControlTreeUpdateStatus(idx);
      #    }
      #}
    ENDSOURCE
    SOURCE #toggleFastTabSummary
      #void toggleFastTabSummary()
      #{
      #    FormControl activeFormControl;
      #    FastTabSummary summaryValue;
      #
      #    int idx = controlTree.getSelection();
      #    ;
      #
      #    if (idx)
      #    {
      #        activeFormControl = sysSetupForm.formControlTreeIdx2Control(idx);
      #
      #        summaryValue = ControlFastTabSummary.selection();
      #        element.setUserFastTabSummary(activeFormControl, summaryValue);
      #
      #        sysSetupForm.formControlTreeUpdateStatus(idx);
      #    }
      #}
    ENDSOURCE
    SOURCE #toggleLockLayout
      #void toggleLockLayout()
      #{
      #    ;
      #    sysSetupForm.parmLockLayout(moveButtonGrp.enableChilds());
      #    this.updateTask();
      #}
    ENDSOURCE
    SOURCE #toggleSkip
      #void toggleSkip()
      #{
      #    FormControl     activeFormControl;
      #    int             idx = controlTree.getSelection();
      #    ;
      #
      #    if (idx)
      #    {
      #        activeFormControl = sysSetupForm.formControlTreeIdx2Control(idx);
      #        activeFormControl.userSkip(controlSkip.value());
      #        sysSetupForm.formControlTreeUpdateStatus(idx);
      #    }
      #}
    ENDSOURCE
    SOURCE #toggleVisible
      #void toggleVisible()
      #{
      #    ;
      #    sysSetupForm.formControlTreeVisible(!controlVisible.value());
      #}
    ENDSOURCE
    SOURCE #unpack
      #void unpack(container _pack)
      #{
      #
      #    if (!this.lastValueDesignName())
      #    {
      #        sysSetupForm.designUnpackUserSetting(_pack);
      #    }
      #    else
      #    {
      #        Debug::assert(false);
      #    }
      #}
    ENDSOURCE
    SOURCE #updateTask
      #public void updateTask(FormControl control = null)
      #{
      #    boolean             enabled;
      #    int                 layOutIdx   = controlTree.getSelection();
      #    FormAllowUserSetup  formAllowUserSetup;
      #    boolean             allowMove, allowAdd;
      #    ;
      #
      #    if (!control)
      #    {
      #        control = sysSetupForm.formControlTreeIdx2Control(layoutIdx);
      #    }
      #
      #    if (control)
      #    {
      #        formAllowUserSetup = sysSetupForm.formControlTreeAllowUserSetup(layOutIdx);
      #        enabled            = (formAllowUserSetup != FormAllowUserSetup::No);
      #
      #        controlName.text(sysSetupForm.formControlLabel(control, true));
      #
      #        controlVisible.value(!control.userHide());
      #        controlVisible.enabled(enabled && (control.visible() || control.userHide()));
      #
      #        controlAllowEdit.value( !control.userDisable());
      #        controlAllowEdit.enabled(enabled && (control.allowEdit() || control.userDisable()));
      #
      #        controlSkip.value( control.userSkip() );
      #        controlSkip.enabled(enabled && (!control.skip() || control.userSkip()));
      #
      #        if (element.isEditControl(control) == true)
      #        {
      #            controlFastTabSummary.selection(element.getUserFastTabSummary(control));
      #            controlFastTabSummary.enabled(enabled);
      #        }
      #        else
      #        {
      #            controlFastTabSummary.selection(-1);
      #            controlFastTabSummary.enabled(false);
      #        }
      #
      #        promptEdit.enabled(enabled);
      #        widthEdit.enabled(enabled);
      #
      #        configurationKeys.text(sysSetupForm.formControlConfigurationKeys(control));
      #        if (element.args() && element.args().caller())
      #        {
      #            devControlName.text(element.formControlBuildText(element.args().caller(),control));
      #        }
      #// #! INCIDENT !#.LAST.07.09.16.SMC:
      #        formControlDataSource = control;
      #// #! INCIDENT !#.LAST.07.09.16.SMC:
      #    }
      #    else
      #    {
      #        controlVisible.enabled(false);
      #        controlAllowEdit.enabled(false);
      #        controlSkip.enabled(false);
      #        promptEdit.enabled(false);
      #        widthEdit.enabled(false);
      #    }
      #
      #    promptEdit.update();
      #    widthEdit.update();
      #
      #    allowMove = sysSetupForm.formControlTreeAllowMove(layOutIdx);
      #
      #    buttonMoveUp.enabled(allowMove);
      #    buttonMoveDown.enabled(allowMove);
      #
      #    buttonMoveLeft.enabled(sysSetupForm.formControlTreeAllowLeft(layOutIdx));
      #    buttonMoveRight.enabled(sysSetupForm.formControlTreeAllowRight(layOutIdx));
      #
      #    buttonRemove.enabled(sysSetupForm.formControlTreeAllowRemove(layOutIdx));
      #
      #    allowAdd = !sysSetupForm.formControlTreeNeverAllowUserAdd(layOutIdx) &&
      #                sysSetupForm.formControlTreeAllowUserSetup(0) == FormAllowUserSetup::Yes &&
      #                sysSetupForm.formControlTreeAllowUserSetup(layOutIdx) == FormAllowUserSetup::Yes;
      #
      #    SysSetupFormAddFields.enabled(allowAdd);
      #
      #}
    ENDSOURCE
    SOURCE #userParmWrite
      #void userParmWrite(Name name)
      #{
      #    lastValueDesignName = name;
      #    xSysLastValue::saveLast(this);
      #    lastValueDesignName = '';
      #}
    ENDSOURCE
    SOURCE #userPrompt
      #// BP deviation documented
      #edit LabelType userPrompt(boolean _set, LabelString _value)
      #{
      #    FormControl formControl;
      #    int         idx = controlTree.getSelection();
      #    ;
      #
      #    if (idx)
      #    {
      #        formControl = sysSetupForm.formControlTreeIdx2Control( idx );
      #    }
      #
      #    if (_set && formControl)
      #    {
      #        formControl.userPromptText( _value );
      #        sysSetupForm.formControlTreeUpdateStatus(idx);
      #    }
      #
      #    if (formControl)
      #        return formControl.userPromptText();
      #
      #    return "";
      #}
    ENDSOURCE
    SOURCE #userWidth
      #// BP deviation documented
      #edit Integer userWidth(boolean _set,Integer _value)
      #{
      #    FormControl     formControl;
      #    int             w,h;
      #    int             bw, bh;
      #    int             idx = controlTree.getSelection();
      #;
      #
      #    if (idx)
      #    {
      #        formControl = sysSetupForm.formControlTreeIdx2Control( idx );
      #    }
      #
      #    if(formControl)
      #    {
      #        [bw,bh] = formControl.calcControlSize(0,0); // border wodth/height
      #    }
      #
      #    if (_set && formControl)
      #    {
      #        if(_value)
      #             [w,h] = formControl.calcControlSize(_value,1);
      #             w -= bw; h -= bh; // pure width/height, w/o border
      #
      #        formControl.userWidth(w);
      #        sysSetupForm.formControlTreeUpdateStatus( idx );
      #    }
      #
      #    if (formControl)
      #    {
      #        [w,h] = formControl.calcControlSize(1,1);
      #        w -= bw; h -= bh; // pure width/height, w/o border
      #        return (formControl.userWidth() / w);
      #    }
      #
      #    return 0;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS25453
      WindowType          #Popup
      HideToolbar         #Yes
      SetCompany          #No
      Columnspace         #2
      HideIfEmpty         #No
      AllowUserSetup      #No
      StatusBarStyle      #Simple
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          Left                #Auto (left)
          VerticalSpacing     #4
          ElementPosition     #1610612734
          HierarchyParent     #MoveButtonGrp
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ControlBtnGrp
          Left                #Auto (left)
          ElementPosition     #1610612734
          HierarchyParent     #ControlBottomGrp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MainBtnGrp
          AutoDeclaration     #Yes
          Left                #Auto (left)
          ElementPosition     #1610612734
          HierarchyParent     #RightGrp
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CallerGrp
          VerticalSpacing     #6
          ElementPosition     #1610612734
          HierarchyParent     #Info
          FrameType           #None
          Columns             #2
          Columnspace         #4
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ControlBottomGrp
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #ControlGrp
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ControlGrp
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #LayoutTab
          FrameType           #Edged 3D
          Caption             #@SYS27573
          Columnspace         #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CountGrp
          NeededPermission    #Manual
          ConfigurationKey    #SysDevelopmentMorphX
          SecurityKey         #SysDevelopment
          ElementPosition     #2013265918
          HierarchyParent     #Info
          FrameType           #None
          OptionValue         #0
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Created
          ElementPosition     #1073741823
          HierarchyParent     #CountGrp
          Caption             #@SYS11408
          OptionValue         #0
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FormGrp
          VerticalSpacing     #6
          ElementPosition     #1073741823
          HierarchyParent     #Info
          FrameType           #None
          Columns             #2
          Columnspace         #4
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupButtons
          ElementPosition     #1610612734
          HierarchyParent     #MenuItemGrp
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MenuItemGrp
          ElementPosition     #1811939326
          HierarchyParent     #Info
          FrameType           #None
          Columns             #2
          Columnspace         #4
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Modified
          ElementPosition     #1879048190
          HierarchyParent     #CountGrp
          Caption             #@SYS27395
          OptionValue         #0
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MoveButtonGrp
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ControlBottomGrp
          FrameType           #Edged 3D
          Caption             #@SYS24586
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #    ;
            #    element.toggleLockLayout();
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PropertiesGroup
          AutoDeclaration     #Yes
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #RightGrp
          FrameType           #Edged 3D
          Caption             #@SYS10344
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #RightGrp
          Left                #Right edge
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #LayoutTab
          FrameType           #None
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #YellowBarGroup
          Width               #Column width
          ElementPosition     #536870911
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MANAGEDHOST
        PROPERTIES
          Name                #YellowBarMessagePane
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #YellowBarGroup
          TypeName            #Microsoft.Dynamics.Framework.UI.WinForms.Controls.MessagePane
          AssemblyName        #Microsoft.Dynamics.Framework.UI.WinForms.Controls, Version=1.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #ControlTab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          Tabs                #2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Info
          ElementPosition     #1610612734
          HierarchyParent     #ControlTab
          Caption             #@SYS22719
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #LayoutTab
          ElementPosition     #1073741823
          HierarchyParent     #ControlTab
          Caption             #@SYS27573
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #QueryPage
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ConfigurationKey    #SysDevelopmentMorphX
          SecurityKey         #SysDevelopment
          ElementPosition     #1879048190
          HierarchyParent     #ControlTab
          Caption             #@SYS25531
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonMoveDown
          AutoDeclaration     #Yes
          Left                #Center
          HelpText            #@sys74620
          ElementPosition     #1879048190
          HierarchyParent     #MoveButtonGrp
          Text                #@SYS2047
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    sysSetupForm.formControlTreeMoveVertical(false);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonMoveLeft
          AutoDeclaration     #Yes
          HelpText            #@sys2801
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          Text                #@SYS2801
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    sysSetupForm.formControlTreeMoveLeft();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonMoveRight
          AutoDeclaration     #Yes
          HelpText            #@sys13169
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Text                #@SYS13169
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    sysSetupForm.formControlTreeMoveRight();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonMoveUp
          AutoDeclaration     #Yes
          Left                #Center
          HelpText            #@sys74619
          ElementPosition     #1073741823
          HierarchyParent     #MoveButtonGrp
          Text                #@SYS5474
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    sysSetupForm.formControlTreeMoveVertical(true);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ButtonRemove
          AutoDeclaration     #Yes
          AlignControl        #Yes
          HelpText            #@SYS26394
          ElementPosition     #1610612734
          HierarchyParent     #ControlBtnGrp
          Text                #@SYS26394
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    ;
            #    sysSetupForm.formControlTreeUserRemove();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #CallerEditButton
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          HelpText            #@SYS453
          ConfigurationKey    #SysDevelopmentMorphX
          SecurityKey         #SysDevelopment
          ElementPosition     #1610612734
          HierarchyParent     #CallerGrp
          Text                #@SYS453
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    #AOT
            #    TreeNode treeNode = infolog.findNode(sysSetupForm.getCallerPath());
            #    ;
            #    if (treeNode)
            #    {
            #        treeNode.AOTnewWindow();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #FormEditButton
          NeededPermission    #Manual
          HelpText            #@SYS53425
          ConfigurationKey    #SysDevelopmentMorphX
          SecurityKey         #SysDevelopment
          ElementPosition     #1610612734
          HierarchyParent     #FormGrp
          Text                #@SYS453
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    #AOT
            #
            #    TreeNode treeNode = infolog.findNode(#formsPath + #AOTDelimiter + sysSetupForm.getFormName());
            #    ;
            #    if (treeNode)
            #    {
            #        treeNode.AOTnewWindow();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Load
          HelpText            #@SYS8494
          ElementPosition     #1073741823
          HierarchyParent     #MainBtnGrp
          Text                #@SYS8494
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.loadSetup(curuserid());
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #LoadFromUser
          HelpText            #@SYS28105
          ElementPosition     #2013265918
          HierarchyParent     #MainBtnGrp
          Text                #@SYS28105
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.loadFromUser();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #MenuItemEditButton
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          HelpText            #@sys2475
          ConfigurationKey    #SysDevelopmentMorphX
          SecurityKey         #SysDevelopment
          ElementPosition     #1073741822
          HierarchyParent     #GroupButtons
          Text                #@SYS453
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    TreeNode treeNode = infolog.findNode(sysSetupForm.getMenuItemPath());
            #    ;
            #    if (treeNode)
            #    {
            #        treeNode.AOTnewWindow();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Reset
          HelpText            #@SYS3073
          ElementPosition     #1879048190
          HierarchyParent     #MainBtnGrp
          Text                #@SYS3073
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    xSysLastValue::deleteLast(element);
            #    element.disableLayoutChanges();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #Save
          HelpText            #@SYS12229
          ElementPosition     #1610612734
          HierarchyParent     #MainBtnGrp
          Text                #@SYS12229
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    element.saveSetup();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ControlAllowEdit
          AutoDeclaration     #Yes
          HelpText            #@SYS73320
          ElementPosition     #1879048190
          HierarchyParent     #PropertiesGroup
          Label               #@SYS25455
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #boolean modified()
            #{
            #    boolean         ret = super();
            #    ;
            #    element.toggleAllowEdit();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ControlSkip
          AutoDeclaration     #Yes
          HelpText            #@SYS73318
          ElementPosition     #2013265918
          HierarchyParent     #PropertiesGroup
          Label               #@SYS25456
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #boolean modified()
            #{
            #    boolean         ret = super();
            #    ;
            #    element.toggleSkip();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #ControlVisible
          AutoDeclaration     #Yes
          HelpText            #@SYS73322
          ElementPosition     #1610612734
          HierarchyParent     #PropertiesGroup
          Label               #@SYS25454
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #boolean modified()
            #{
            #
            #    boolean         ret = super();
            #    ;
            #
            #    element.toggleVisible();
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ControlFastTabSummary
          AutoDeclaration     #Yes
          HelpText            #@sys152566
          ElementPosition     #2080374782
          HierarchyParent     #PropertiesGroup
          Label               #@sys152567
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    element.toggleFastTabSummary();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #CreatedDate
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1610612734
          HierarchyParent     #Created
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #ModifiedDate
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1610612734
          HierarchyParent     #Modified
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #widthEdit
          AutoDeclaration     #Yes
          HelpText            #@SYS73315
          ElementPosition     #2130706430
          HierarchyParent     #PropertiesGroup
          ShowZero            #No
          Label               #@SYS70459
          DataMethod          #UserWidth
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #DSMSecurityTree
          HelpText            #@DSM180
          ElementPosition     #1610612733
          HierarchyParent     #GroupButtons
          Text                #@DSM180
          MenuItemName        #DSMSecurityTree
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #public void clicked()
            #{
            #
            #    Args    args = new args();
            #
            #    args.parmObject(DSMSecurityTreeNode::newStandard(DSMSecurityTreeNodeType::MenuItemDisplay, MenuItemName.valueStr(), MenuItemName.label(),0));
            #
            #    this.menufunction().run(args);
            #
            #
            #    //super
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysSetupFormAddFields
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ControlBtnGrp
          MenuItemName        #SysSetupFormAddFields
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    if (!sysSetupForm.fieldFormRunSetFocus())
            #    {
            #        super();
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CallerName
          AutoDeclaration     #Yes
          AllowEdit           #No
          HelpText            #@SYS73310
          ElementPosition     #1073741823
          HierarchyParent     #CallerGrp
          Label               #@SYS73311
          ExtendedDataType    
            ARRAY 
              #ClassName
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ConfigurationKeys
          AutoDeclaration     #Yes
          AllowEdit           #No
          NeededPermission    #Manual
          Height              #Column height
          HelpText            #@SYS73314
          SecurityKey         #AdminSetup
          ElementPosition     #2139095038
          HierarchyParent     #PropertiesGroup
          DisplayLength       #30
          MultiLine           #Yes
          Label               #@SYS71856
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ControlName
          AutoDeclaration     #Yes
          AllowEdit           #No
          HelpText            #@SYS73321
          ElementPosition     #1073741823
          HierarchyParent     #PropertiesGroup
          Label               #@SYS7399
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CreatedBy
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1073741823
          HierarchyParent     #Created
          ExtendedDataType    
            ARRAY 
              #CreatedBy
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #DevControlName
          AutoDeclaration     #Yes
          AllowEdit           #No
          Height              #Column height
          HelpText            #@SYS98782
          ElementPosition     #2143289342
          HierarchyParent     #PropertiesGroup
          DisplayLength       #30
          MultiLine           #Yes
          Label               #@SYS11799
        ENDPROPERTIES
        
        METHODS
          SOURCE #aotName
            #public str aotName()
            #{
            #    #aot
            #
            #    str         aotName = strLRTrim(this.valueStr());
            #    int         pos;
            #    int         posStart;
            #    int         posEnd;
            #
            #    pos = strScan(aotName, 'Display',1, strLen(aotName));
            #    if (pos)
            #    {
            #        posStart =strScan(aotName, '/',pos, strLen(aotName));
            #        posEnd = strFind(aotName,' ',posStart, strLen(aotName));
            #        aotName = subStr(aotName, posStart+1, posEnd-posStart-1);
            #        return strFmt('%1\\%2', #MenuItemsDisplayPath, aotName);
            #    }
            #
            #    pos = strScan(aotName, 'Action',1, strLen(aotName));
            #    if (pos)
            #    {
            #        posStart =strScan(aotName, '/',pos, strLen(aotName));
            #        posEnd = strFind(aotName,' ',posStart, strLen(aotName));
            #        aotName = subStr(aotName, posStart+1, posEnd-posStart-1);
            #        return strFmt('%1\\%2', #MenuItemsActionPath, aotName);
            #    }
            #
            #    pos = strScan(aotName, 'Output',1, strLen(aotName));
            #    if (pos)
            #    {
            #        posStart =strScan(aotName, '/',pos, strLen(aotName));
            #        posEnd = strFind(aotName,' ',posStart, strLen(aotName));
            #        aotName = subStr(aotName, posStart+1, posEnd-posStart-1);
            #        return strFmt('%1\\%2', #MenuItemsOutputPath, aotName);
            #    }
            #
            #    return '';
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #FormName
          AutoDeclaration     #Yes
          AllowEdit           #No
          HelpText            #@SYS73313
          ElementPosition     #1073741823
          HierarchyParent     #FormGrp
          ExtendedDataType    
            ARRAY 
              #FormName
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #MenuItemName
          AutoDeclaration     #Yes
          AllowEdit           #No
          HelpText            #@SYS73309
          ElementPosition     #1073741823
          HierarchyParent     #MenuItemGrp
          Label               #@SYS28739
          ExtendedDataType    
            ARRAY 
              #ClassName
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModifiedBy
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1073741823
          HierarchyParent     #Modified
          ExtendedDataType    
            ARRAY 
              #ModifiedBy
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #promptEdit
          AutoDeclaration     #Yes
          HelpText            #@SYS73319
          ElementPosition     #2113929214
          HierarchyParent     #PropertiesGroup
          LookupButton        #Never
          DataMethod          #userPrompt
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #//    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TIMEEDIT
        PROPERTIES
          Name                #CreatedTime
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1879048190
          HierarchyParent     #Created
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TIMEEDIT
        PROPERTIES
          Name                #ModifiedTime
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1879048190
          HierarchyParent     #Modified
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #ControlTree
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS98787
          DragDrop            #Manual
          ElementPosition     #1073741822
          HierarchyParent     #ControlGrp
        ENDPROPERTIES
        
        METHODS
          SOURCE #beginDrag
            #public int beginDrag(int _x, int _y)
            #{
            #    boolean ret;
            #    ;
            #    if (sysSetupForm.formControlTreeBeginDrag())
            #    {
            #        ret     = super(_x,_y);
            #    }
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #dragLeave
            #public void dragLeave()
            #{
            #    super();
            #    sysSetupForm.formControlTreeDragOverHilite();
            #}
          ENDSOURCE
          SOURCE #dragOver
            #public FormDrag dragOver(FormControl _dragSource, FormDrag _dragMode, int _x, int _y)
            #{
            #    FormDrag formDrag;
            #    ;
            #    formDrag = super(_dragSource, _dragMode, _x, _y);
            #    formDrag = sysSetupForm.formControlTreeDragOver(_dragSource, _x, _y);
            #
            #    return formDrag;
            #}
            #
          ENDSOURCE
          SOURCE #drop
            #public void drop(FormControl _dragSource, FormDrag _dragMode, int _x, int _y)
            #{
            #    int idx;
            #    ;
            #
            #    [idx] = this.hitTest(_x,_y);
            #
            #    super(_dragSource, _dragMode, _x, _y);
            #
            #    sysSetupForm.formControlTreeDrop(_dragSource, idx);
            #}
          ENDSOURCE
          SOURCE #mouseDblClick
            #// lukDEVAX_aruz_AotNewWindowAsChil, aruz, 23.08.2018
            #public int mouseDblClick(int _x, int _y, int _button, boolean _Ctrl, boolean _Shift)
            #{
            #    int ret;
            #
            #    ret = super(_x, _y, _button, _Ctrl, _Shift);
            #    element.lukOpenSelectedItem();
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #mouseDown
            #public int mouseDown(int _x, int _y, int _button, boolean _ctrl, boolean _shift)
            #{
            #    int ret;
            #
            #    ret = super(_x, _y, _button, _ctrl, _shift);
            #
            #    sysSetupForm.formControlTreeMouseDown(_x, _y, _button);
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #void selectionChanged(FormTreeItem oldItem, FormTreeItem newItem, FormTreeSelect how)
            #{
            #    FormControl     formControl;
            #    ;
            #    super(oldItem, newItem, how);
            #
            #    formControl = sysSetupForm.formControlTreeIdx2Control(newItem.idx());
            #    if (formControl)
            #    {
            #        element.selectionChanged(formControl);
            #    }
            #}
          ENDSOURCE
          SOURCE #showContextMenu
            #public int showContextMenu(int _menuHandle)
            #{
            #    int         ret;
            #    PopupMenu   popupMenu = PopupMenu::create(_menuHandle, controlTree.hWnd());
            #    int         securityIdx;
            #    str         aotName;
            #    Args        args = new Args();
            #    FormDataSource  formDatasource;
            #
            #    // #! INCIDENT !#.LAST.06.09.16.SMC:
            #    int             tableBrowserIdx;
            #    // #! INCIDENT !#.LAST.06.09.16.SMC:
            #
            #    if (!controlTree.getSelection())
            #    {
            #        ret = super(_menuHandle);
            #    }
            #    else
            #    {
            #        aotName = devControlName.aotName();
            #        if (aotName)
            #        {
            #            securityIdx = popupMenu.insertItem(strFmt('%1 - %2',"@DSM180", aotName));
            #        }
            #// #! INCIDENT !#.LAST.06.09.16.SMC:
            #        if(formControlDataSource)
            #            formDatasource = formControlDataSource.dataSourceObject();
            #        if (hasMenuItemAccess(menuitemDisplayStr(DSMTableBrowser), MenuItemType::Display)
            #            && formControlDataSource && formDatasource && formDatasource.table())
            #        {
            #            tableBrowserIdx = popupMenu.insertItem("@SYS54191");
            #        }
            #// #! INCIDENT !#.LAST.06.09.16.SMC:
            #
            #        ret = popupMenu.draw();
            #
            #        if (ret == securityIdx)
            #        {
            #            args.parmObject(DSMSecurityTreeNode::newAotName(aotName));
            #            new MenuFunction(menuitemdisplaystr(DSMSecurityTree), MenuItemType::Display).run(args);
            #        }
            #// #! INCIDENT !#.LAST.06.09.16.SMC:
            #        if (ret == tableBrowserIdx)
            #        {
            #            if (formControlDataSource)
            #            {
            #                element.tableBrowser(formControlDataSource);
            #            }
            #        }
            #// #! INCIDENT !#.LAST.06.09.16.SMC:
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #QueryTree
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS98788
          ElementPosition     #1431655764
          HierarchyParent     #QueryPage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: JOB

; Microsoft Dynamics AX Job: lukDEVAX_aotNewWindowAsChild_aruz выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #lukDEVAX_aotNewWindowAsChild_aruz
    #static void lukDEVAX_aotNewWindowAsChild_aruz(Args _args)
    #{
    #    TreeNode        treeNode;
    #    TreeNodePath    path;
    #    ;
    #    path = @"\Classes\GRD_OpenedNodeWindows\aotNewWindowAsChild_MRC";
    #    path = @"\Forms\ACOProdOverHeadTrans_BR\Designs\Design\[ActionPane:ActionPane]\[ActionPaneTab:ActionPaneTab]\[ButtonGroup:NewDeleteGroup]\CommandButton:NewButton";
    #    path = @"\Forms\ACOProdOverHeadTrans_BR\Data Sources\ACOProdOverHeadCostTrans_BR\Fields\CostAbsorption";
    #    treeNode = TreeNode::findNode(path);
    #    lukOpenedNodeWindows::aotNewWindowAsChild(treeNode);
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{78E01CDE-7FEE-42F2-9E36-5AD9E6EB73F5}
  ENDPROPERTIES
  

***Element: PRN

; Microsoft Dynamics AX Project : lukDEVAX_aruz_AotNewWindowAsChil unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #lukDEVAX_aruz_AotNewWindowAsChil
  SHARED
  PROPERTIES
    Name                #lukDEVAX_aruz_AotNewWindowAsChil
    Origin              #{68BB3F0C-7536-4963-B248-112D558AC758}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 2472
      NODETYPE 329
      NAME #SysFormRun
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 53987
      NODETYPE 329
      NAME #lukOpenedNodeWindows
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 11
      UTILOBJECTID 0
      NODETYPE 201
      NAME #SysSetupForm
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #lukDEVAX_aotNewWindowAsChild_aruz
    ENDNODE
  ENDPROJECT
  

***Element: END
